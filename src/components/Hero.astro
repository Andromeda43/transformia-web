---
import TechShowcase from './TechShowcase.astro';
import GlitchTitle from './GlitchTitle.astro';
---

<section class="hero" id="hero">
  <!-- Fondo con grid animado -->
  <div class="grid-background"></div>
  
  <!-- Círculos de neón flotantes -->
  <div class="neon-circle" style="--size: 300px; --top: 15%; --left: 10%; --color: rgba(176, 66, 255, 0.15); --delay: 0s;"></div>
  <div class="neon-circle" style="--size: 400px; --top: 60%; --left: 80%; --color: rgba(66, 135, 255, 0.12); --delay: 3s;"></div>
  <div class="neon-circle" style="--size: 250px; --top: 70%; --left: 5%; --color: rgba(255, 66, 176, 0.1); --delay: 5s;"></div>
  
  <!-- Elementos geométricos decorativos -->
  <div class="geometric-element rect-element" style="--top: 25%; --left: 5%; --rotate: 15deg; --size: 40px;"></div>
  <div class="geometric-element triangle-element" style="--top: 70%; --left: 85%; --rotate: -10deg; --size: 60px;"></div>
  <div class="geometric-element cross-element" style="--top: 15%; --left: 90%; --rotate: 25deg; --size: 50px;"></div>
  
  <!-- Líneas de scanline -->
  <div class="scanlines"></div>
  
  <!-- Partículas flotantes -->
  <div class="particles-container">
    <div class="particle" style="--size: 3px; --top: 20%; --left: 30%; --speed: 25s;"></div>
    <div class="particle" style="--size: 2px; --top: 40%; --left: 70%; --speed: 30s;"></div>
    <div class="particle" style="--size: 4px; --top: 80%; --left: 20%; --speed: 20s;"></div>
    <div class="particle" style="--size: 2px; --top: 10%; --left: 50%; --speed: 35s;"></div>
    <div class="particle" style="--size: 3px; --top: 50%; --left: 10%; --speed: 28s;"></div>
    <div class="particle" style="--size: 2px; --top: 70%; --left: 80%; --speed: 32s;"></div>
    <div class="particle" style="--size: 4px; --top: 30%; --left: 40%; --speed: 22s;"></div>
    <div class="particle" style="--size: 3px; --top: 60%; --left: 65%; --speed: 27s;"></div>
    <div class="particle" style="--size: 2px; --top: 90%; --left: 25%; --speed: 31s;"></div>
    <div class="particle" style="--size: 4px; --top: 15%; --left: 60%; --speed: 24s;"></div>
  </div>
  
  <div class="container">
    <div class="hero-content">
      <div class="hero-text">
        <!-- Título con efecto glitch -->
        <GlitchTitle />
        
        <p class="tagline">
          El aliado que traduce tus desafíos en <span class="highlight">oportunidades</span> de crecimiento.
        </p>
        
        <div class="btn-container">
          <a href="#servicios" class="cybr-btn">
            DESCUBRIR SERVICIOS<span aria-hidden class="cybr-btn__glitch">DESCUBRIR SERVICIOS</span>
          </a>
          <a href="/contacto" class="cybr-btn cybr-btn--secondary">
            CONTÁCTANOS<span aria-hidden class="cybr-btn__glitch">CONTÁCTANOS</span>
          </a>
        </div>
      </div>
      
      <!-- Componente de Showcase Tecnológico -->
      <div class="showcase-wrapper">
        <TechShowcase />
      </div>
    </div>
  </div>
  
  <!-- Flecha animada hacia abajo -->
  <div class="scroll-arrow">
    <a href="#servicios">
      <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M12 5v14M5 12l7 7 7-7"/>
      </svg>
    </a>
  </div>
</section>

<style>
  /* Estilos base para la sección hero */
  .hero {
    position: relative;
    min-height: 100vh;
    background-color: #0a0a14;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    padding: 3rem 0; /* Espacio superior reducido */
  }
  
  .container {
    width: 90%;
    max-width: 1280px;
    margin: 0 auto;
    position: relative;
    z-index: 10;
  }
  
  .hero-content {
    display: grid;
    grid-template-columns: 1fr;
    gap: 3rem;
    align-items: center;
  }
  
  @media (min-width: 768px) {
    .hero-content {
      grid-template-columns: 1fr 1fr;
    }
  }
  
  /* Fondo con grid */
  .grid-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 200%;
    background-image: 
      linear-gradient(to right, rgba(128, 90, 213, 0.2) 1px, transparent 1px),
      linear-gradient(to bottom, rgba(128, 90, 213, 0.2) 1px, transparent 1px);
    background-size: 40px 40px;
    transform: perspective(500px) rotateX(60deg);
    transform-origin: center top;
    animation: grid-scroll 20s linear infinite;
    z-index: 1;
  }
  
  @keyframes grid-scroll {
    0% {
      background-position: 0 0;
    }
    100% {
      background-position: 0 1000px;
    }
  }
  
  /* Círculos de neón */
  .neon-circle {
    position: absolute;
    width: var(--size);
    height: var(--size);
    border-radius: 50%;
    top: var(--top);
    left: var(--left);
    background-color: var(--color);
    filter: blur(60px);
    z-index: 2;
    animation: pulse 8s ease-in-out infinite;
    animation-delay: var(--delay);
  }
  
  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
      opacity: 0.8;
    }
    50% {
      transform: scale(1.2);
      opacity: 0.5;
    }
  }
  
  /* Elementos geométricos */
  .geometric-element {
    position: absolute;
    top: var(--top);
    left: var(--left);
    width: var(--size);
    height: var(--size);
    border: 1px solid rgba(176, 66, 255, 0.5);
    z-index: 2;
    transform: rotate(var(--rotate));
    animation: float 10s ease-in-out infinite, glow 2s ease-in-out infinite alternate;
  }
  
  .rect-element {
    border-radius: 4px;
  }
  
  .triangle-element {
    clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
  }
  
  .cross-element {
    position: relative;
  }
  
  .cross-element::before, .cross-element::after {
    content: '';
    position: absolute;
    background-color: rgba(176, 66, 255, 0.5);
  }
  
  .cross-element::before {
    width: 100%;
    height: 2px;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
  }
  
  .cross-element::after {
    width: 2px;
    height: 100%;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
  }
  
  @keyframes float {
    0%, 100% {
      transform: translate(0, 0) rotate(var(--rotate));
    }
    25% {
      transform: translate(5px, -5px) rotate(calc(var(--rotate) + 5deg));
    }
    50% {
      transform: translate(0, 10px) rotate(var(--rotate));
    }
    75% {
      transform: translate(-5px, -5px) rotate(calc(var(--rotate) - 5deg));
    }
  }
  
  @keyframes glow {
    0% {
      box-shadow: 0 0 5px rgba(176, 66, 255, 0.5);
    }
    100% {
      box-shadow: 0 0 15px rgba(176, 66, 255, 0.8), 0 0 20px rgba(176, 66, 255, 0.5);
    }
  }
  
  /* Efecto Scanline */
  .scanlines {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      to bottom,
      transparent 50%,
      rgba(128, 90, 213, 0.05) 50%
    );
    background-size: 100% 4px;
    z-index: 12;
    pointer-events: none;
    animation: scanlines 0.5s steps(60) infinite;
  }
  
  @keyframes scanlines {
    0% {
      background-position: 0 0;
    }
    100% {
      background-position: 0 4px;
    }
  }
  
  /* Partículas flotantes */
  .particles-container {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 3;
  }
  
  .particle {
    position: absolute;
    width: var(--size);
    height: var(--size);
    background-color: rgba(176, 66, 255, 0.6);
    border-radius: 50%;
    top: var(--top);
    left: var(--left);
    box-shadow: 0 0 10px rgba(176, 66, 255, 0.8);
    animation: particle-move var(--speed) linear infinite;
  }
  
  @keyframes particle-move {
    0% {
      transform: translateY(0) translateX(0);
    }
    25% {
      transform: translateY(50px) translateX(20px);
    }
    50% {
      transform: translateY(100px) translateX(-20px);
    }
    75% {
      transform: translateY(50px) translateX(-40px);
    }
    100% {
      transform: translateY(0) translateX(0);
    }
  }
  
  /* Estilos del texto */
  .hero-text {
    opacity: 1;
  }
  
  .tagline {
    font-size: 1.5rem;
    line-height: 1.4;
    margin-bottom: 2rem;
    opacity: 1;
    font-family: 'Space Grotesk', sans-serif;
    max-width: 540px;
  }
  
  .highlight {
    color: #b042ff;
    text-shadow: 0 0 5px rgba(176, 66, 255, 0.7);
    font-weight: 500;
  }
  
  /* Botones */
  .btn-container {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    opacity: 1;
  }
  
  .cybr-btn {
    --primary: hsl(var(--primary-hue), 85%, 60%);
    --shadow-primary: hsl(var(--shadow-primary-hue), 90%, 50%);
    --primary-hue: 268;
    --shadow-primary-hue: 280;
    --font-size: 16px;
    --primary-border: 1px;
    --shadow-primary-border: 1px;
    --clip: polygon(0 0, 100% 0, 100% 100%, 0 100%);
    
    font-family: 'Space Mono', monospace;
    color: white;
    cursor: pointer;
    background: transparent;
    text-transform: uppercase;
    font-size: var(--font-size);
    outline: transparent;
    letter-spacing: 2px;
    position: relative;
    font-weight: 700;
    border: 0;
    min-width: 200px;
    height: 50px;
    line-height: 50px;
    transition: background 0.2s;
    display: inline-block;
    text-align: center;
    text-decoration: none;
    padding: 0 15px;
    overflow: hidden;
  }
  
  .cybr-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    clip-path: var(--clip);
    z-index: -1;
  }
  
  .cybr-btn::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    clip-path: var(--clip);
    z-index: -1;
  }
  
  .cybr-btn::before {
    background: var(--primary);
    background-image: linear-gradient(90deg, #6b46c1 0%, #9f7aea 100%);
    transform: translateX(calc(var(--border-width, 0px) * -1)) translateY(calc(var(--border-width, 0px) * -1));
  }
  
  .cybr-btn::after {
    background: var(--shadow-primary);
    transform: translateX(var(--border-width, 0px)) translateY(var(--border-width, 0px));
    background-image: linear-gradient(90deg, #6b46c1 0%, #9f7aea 100%);
    filter: blur(1px);
  }
  
  .cybr-btn__glitch {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--shadow-primary);
    background-image: linear-gradient(90deg, #6b46c1 0%, #9f7aea 100%);
    text-shadow: 2px 2px var(--shadow-primary), -2px -2px var(--shadow-primary);
    clip-path: var(--clip);
    display: none;
    z-index: -2;
    animation: glitch-btn 0.8s infinite;
  }
  
  @keyframes glitch-btn {
    0%, 5%, 10%, 100% {
      opacity: 0.8;
      transform: translateX(0);
    }
    1% {
      transform: translateX(-2px);
      opacity: 0.9;
    }
    2% {
      transform: translateX(2px);
      opacity: 0.9;
    }
    6% {
      transform: translateX(-2px);
      opacity: 0.9;
    }
    8% {
      transform: translateX(2px);
      opacity: 0.9;
    }
  }
  
  .cybr-btn:hover .cybr-btn__glitch {
    display: block;
  }
  
  .cybr-btn:hover::before {
    background: var(--primary-darker, hsl(var(--primary-hue), 85%, 50%));
    transform: translateX(0) translateY(0);
  }
  
  .cybr-btn:hover::after {
    background: var(--shadow-primary-darker, hsl(var(--shadow-primary-hue), 90%, 40%));
    transform: translateX(0) translateY(0);
    filter: blur(3px);
  }
  
  .cybr-btn--secondary {
    --primary-hue: 210;
    --shadow-primary-hue: 220;
  }
  
  .cybr-btn--secondary::before {
    background-image: linear-gradient(90deg, rgba(176, 66, 255, 0.2) 0%, rgba(176, 66, 255, 0.5) 100%);
    border: 1px solid rgba(176, 66, 255, 0.6);
  }
  
  .cybr-btn--secondary::after {
    background-image: linear-gradient(90deg, rgba(176, 66, 255, 0.2) 0%, rgba(176, 66, 255, 0.5) 100%);
    border: 1px solid rgba(176, 66, 255, 0.6);
  }
  
  .cybr-btn--secondary .cybr-btn__glitch {
    background-image: linear-gradient(90deg, rgba(176, 66, 255, 0.4) 0%, rgba(176, 66, 255, 0.8) 100%);
  }
  
  /* Contenedor del showcase */
  .showcase-wrapper {
    position: relative;
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
  }
  
  /* Flecha de desplazamiento */
  .scroll-arrow {
    position: absolute;
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%);
    animation: bounce 2s infinite;
    z-index: 10;
  }
  
  .scroll-arrow svg {
    color: #b042ff;
    filter: drop-shadow(0 0 5px rgba(176, 66, 255, 0.7));
  }
  
  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0) translateX(-50%);
    }
    40% {
      transform: translateY(-20px) translateX(-50%);
    }
    60% {
      transform: translateY(-10px) translateX(-50%);
    }
  }
  
  /* Media queries */
  @media (max-width: 768px) {
    .hero-content {
      grid-template-columns: 1fr;
    }
    
    .tagline {
      font-size: 1.25rem;
    }
    
    .btn-container {
      justify-content: center;
    }
    
    .cybr-btn {
      min-width: auto;
      width: 100%;
      margin-bottom: 1rem;
    }
    
    .geometric-element {
      display: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Función para hacer que los elementos respondan al movimiento del mouse
    function mouseParallax() {
      const hero = document.querySelector('.hero');
      if (!hero) return;
      
      const elements = {
        geometrics: document.querySelectorAll('.geometric-element'),
        particles: document.querySelectorAll('.particle'),
        showcase: document.querySelector('.showcase-wrapper'),
        glowCircles: document.querySelectorAll('.neon-circle')
      };
      
      hero.addEventListener('mousemove', (e) => {
        const x = e.clientX / window.innerWidth;
        const y = e.clientY / window.innerHeight;
        
        // Mover elementos geométricos
        elements.geometrics.forEach(el => {
          const moveX = (x - 0.5) * 20;
          const moveY = (y - 0.5) * 20;
          el.style.transform = `translate(${moveX}px, ${moveY}px) rotate(var(--rotate))`;
        });
        
        // Mover contenedor de showcase
        if (elements.showcase) {
          const moveX = (x - 0.5) * 10;
          const moveY = (y - 0.5) * 10;
          elements.showcase.style.transform = `translate(${moveX}px, ${moveY}px)`;
        }
        
        // Mover círculos de brillo
        elements.glowCircles.forEach(el => {
          const moveX = (x - 0.5) * 30;
          const moveY = (y - 0.5) * 30;
          el.style.transform = `translate(${moveX}px, ${moveY}px)`;
        });
      });
    }
    
    // Animación de grid según scroll
    function animateGrid() {
      const grid = document.querySelector('.grid-background');
      if (!grid) return;
      
      window.addEventListener('scroll', () => {
        const scrollY = window.scrollY;
        const rotationX = 60 - (scrollY * 0.05);
        
        grid.style.transform = `perspective(500px) rotateX(${Math.max(30, rotationX)}deg)`;
      });
    }
    
    // Iniciar animaciones
    setTimeout(() => {
      mouseParallax();
      animateGrid();
    }, 100);
  });
</script>