---
---

<div class="digital-transformation-visualization">
  <div class="transformation-container">
    <!-- Roadmap visual de transformación digital -->
    <div class="roadmap-wrapper">
      <div class="roadmap-header">
        <h3>Transformación Digital</h3>
        <div class="roadmap-subtitle">Ruta estratégica hacia el éxito digital</div>
      </div>
      
      <div class="transformation-roadmap">
        <!-- Etapa 1: Sistemas Tradicionales -->
        <div class="roadmap-stage" data-stage="1">
          <div class="stage-connector"></div>
          <div class="stage-node">
            <div class="stage-icon legacy">
              <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                <line x1="8" y1="21" x2="16" y2="21"></line>
                <line x1="12" y1="17" x2="12" y2="21"></line>
              </svg>
              <div class="stage-check">
                <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="#4aef9e" stroke-width="3">
                  <polyline points="20 6 9 17 4 12"></polyline>
                </svg>
              </div>
            </div>
          </div>
          <div class="stage-info">
            <div class="stage-title">Sistemas Tradicionales</div>
            <div class="stage-desc">Infraestructura y procesos existentes</div>
          </div>
        </div>
        
        <!-- Etapa 2: Integración -->
        <div class="roadmap-stage" data-stage="2">
          <div class="stage-connector"></div>
          <div class="stage-node">
            <div class="stage-icon integration">
              <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="2" y="3" width="20" height="18" rx="2" ry="2"></rect>
                <line x1="8" y1="12" x2="16" y2="12"></line>
                <line x1="12" y1="8" x2="12" y2="16"></line>
              </svg>
              <div class="stage-check">
                <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="#4aef9e" stroke-width="3">
                  <polyline points="20 6 9 17 4 12"></polyline>
                </svg>
              </div>
            </div>
          </div>
          <div class="stage-info">
            <div class="stage-title">Integración</div>
            <div class="stage-desc">Conexión de sistemas y datos</div>
          </div>
        </div>
        
        <!-- Etapa 3: Automatización -->
        <div class="roadmap-stage" data-stage="3">
          <div class="stage-connector"></div>
          <div class="stage-node">
            <div class="stage-icon automation">
              <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="3"></circle>
                <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
              </svg>
              <div class="stage-check">
                <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="#4aef9e" stroke-width="3">
                  <polyline points="20 6 9 17 4 12"></polyline>
                </svg>
              </div>
            </div>
          </div>
          <div class="stage-info">
            <div class="stage-title">Automatización</div>
            <div class="stage-desc">Optimización de procesos</div>
          </div>
        </div>
        
        <!-- Etapa 4: Datos Centralizados -->
        <div class="roadmap-stage" data-stage="4">
          <div class="stage-connector"></div>
          <div class="stage-node">
            <div class="stage-icon data">
              <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
                <polygon points="12 2 2 7 12 12 22 7 12 2"></polygon>
                <polyline points="2 17 12 22 22 17"></polyline>
                <polyline points="2 12 12 17 22 12"></polyline>
              </svg>
              <div class="stage-check">
                <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="#4aef9e" stroke-width="3">
                  <polyline points="20 6 9 17 4 12"></polyline>
                </svg>
              </div>
            </div>
          </div>
          <div class="stage-info">
            <div class="stage-title">Datos Centralizados</div>
            <div class="stage-desc">Unificación de la información</div>
          </div>
        </div>
        
        <!-- Etapa 5: Ecosistema Digital -->
        <div class="roadmap-stage" data-stage="5">
          <div class="stage-connector"></div>
          <div class="stage-node">
            <div class="stage-icon digital">
              <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="4" y="4" width="16" height="16" rx="2" ry="2"></rect>
                <rect x="9" y="9" width="6" height="6"></rect>
                <line x1="9" y1="1" x2="9" y2="4"></line>
                <line x1="15" y1="1" x2="15" y2="4"></line>
                <line x1="9" y1="20" x2="9" y2="23"></line>
                <line x1="15" y1="20" x2="15" y2="23"></line>
                <line x1="20" y1="9" x2="23" y2="9"></line>
                <line x1="20" y1="14" x2="23" y2="14"></line>
                <line x1="1" y1="9" x2="4" y2="9"></line>
                <line x1="1" y1="14" x2="4" y2="14"></line>
              </svg>
              <div class="stage-check">
                <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="#4aef9e" stroke-width="3">
                  <polyline points="20 6 9 17 4 12"></polyline>
                </svg>
              </div>
            </div>
          </div>
          <div class="stage-info">
            <div class="stage-title">Ecosistema Digital</div>
            <div class="stage-desc">Plataforma completa e integrada</div>
          </div>
        </div>
        
        <!-- Particles for dynamic feel -->
        <div class="floating-particles">
          <div class="particle p1"></div>
          <div class="particle p2"></div>
          <div class="particle p3"></div>
          <div class="particle p4"></div>
        </div>
      </div>
    </div>
    
    <!-- Barra de progreso separada y mejor posicionada -->
    <div class="progress-section">
      <div class="progress-label">Progreso de transformación</div>
      <div class="progress-container">
        <div class="progress-bar">
          <div class="progress-fill" id="progressFill"></div>
        </div>
        <div class="status-marker" id="statusMarker">
          <div class="marker-label">Estado actual</div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Panel de beneficios -->
  <div class="benefits-panel">
    <div class="benefits-title">Beneficios de la Transformación</div>
    
    <div class="benefits-grid">
      <div class="benefit-item">
        <div class="benefit-icon efficiency">
          <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="10"></circle>
            <polyline points="12 6 12 12 16 14"></polyline>
          </svg>
        </div>
        <div class="benefit-content">
          <div class="benefit-title">Eficiencia Operativa</div>
          <div class="benefit-value">+68%</div>
        </div>
      </div>
      
      <div class="benefit-item">
        <div class="benefit-icon agility">
          <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"></path>
          </svg>
        </div>
        <div class="benefit-content">
          <div class="benefit-title">Agilidad Empresarial</div>
          <div class="benefit-value">+53%</div>
        </div>
      </div>
      
      <div class="benefit-item">
        <div class="benefit-icon data">
          <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 16V8a2 2 0 00-1-1.73l-7-4a2 2 0 00-2 0l-7 4A2 2 0 003 8v8a2 2 0 001 1.73l7 4a2 2 0 002 0l7-4A2 2 0 0021 16z"></path>
            <polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline>
            <line x1="12" y1="22.08" x2="12" y2="12"></line>
          </svg>
        </div>
        <div class="benefit-content">
          <div class="benefit-title">Aprovechamiento de Datos</div>
          <div class="benefit-value">+89%</div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .digital-transformation-visualization {
    background-color: rgba(20, 20, 35, 0.85);
    border-radius: 10px;
    border: 1px solid rgba(176, 66, 255, 0.5);
    overflow: hidden;
    box-shadow: 
      0 0 15px rgba(176, 66, 255, 0.3),
      0 0 30px rgba(176, 66, 255, 0.1);
    backdrop-filter: blur(10px);
    height: 100%;
    display: flex;
    flex-direction: column;
    position: relative;
  }

  /* Contenedor principal */
  .transformation-container {
    position: relative;
    height: 335px;
    padding: 20px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    background: linear-gradient(135deg, rgba(30, 30, 60, 0.5) 0%, rgba(15, 15, 30, 0.7) 100%);
  }

  /* Roadmap header */
  .roadmap-wrapper {
    display: flex;
    flex-direction: column;
    height: 100%;
    margin-bottom: 40px; /* Espacio para la barra de progreso */
  }

  .roadmap-header {
    text-align: center;
    margin-bottom: 10px;
  }

  .roadmap-header h3 {
    font-family: 'Space Mono', monospace;
    font-size: 1.2rem;
    color: #fff;
    margin: 0 0 5px;
    text-shadow: 0 0 10px rgba(176, 66, 255, 0.7);
  }

  .roadmap-subtitle {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.7);
  }

  /* Roadmap visualization */
  .transformation-roadmap {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-top: 20px;
    position: relative;
    flex-grow: 1;
  }

  .roadmap-stage {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    width: 20%;
    z-index: 2;
  }

  .stage-connector {
    position: absolute;
    top: 30px;
    left: calc(-50% + 25px);
    right: calc(-50% + 25px);
    height: 3px;
    background: linear-gradient(90deg, 
      rgba(100, 200, 255, 0.3) 0%, 
      rgba(176, 66, 255, 0.7) 50%,
      rgba(255, 100, 200, 0.3) 100%);
    z-index: 1;
  }

  /* Hide connector for first stage */
  .roadmap-stage[data-stage="1"] .stage-connector {
    left: 0;
    background: linear-gradient(90deg, 
      rgba(176, 66, 255, 0.7) 0%, 
      rgba(255, 100, 200, 0.3) 100%);
  }

  /* Hide connector for last stage */
  .roadmap-stage[data-stage="5"] .stage-connector {
    right: 0;
    background: linear-gradient(90deg, 
      rgba(100, 200, 255, 0.3) 0%, 
      rgba(176, 66, 255, 0.7) 100%);
  }

  .stage-node {
    margin-bottom: 15px;
    position: relative;
    z-index: 2;
  }

  .stage-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 2px solid;
    background-color: rgba(20, 20, 35, 0.7);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .stage-icon::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at center, rgba(255, 255, 255, 0.2) 0%, transparent 70%);
    opacity: 0.7;
  }

  /* Checkmark animation */
  .stage-check {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(20, 20, 35, 0.7);
    border-radius: 50%;
    opacity: 0;
    transform: scale(0.5);
    transition: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
    z-index: 3;
  }

  .roadmap-stage.completed .stage-check {
    opacity: 1;
    transform: scale(1);
  }

  .stage-info {
    text-align: center;
    max-width: 120px;
  }

  .stage-title {
    font-family: 'Space Mono', monospace;
    font-size: 0.8rem;
    font-weight: 700;
    color: #fff;
    margin-bottom: 5px;
  }

  .stage-desc {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 0.7rem;
    color: rgba(255, 255, 255, 0.7);
    line-height: 1.2;
  }

  /* Colores específicos para cada etapa */
  .legacy {
    border-color: #64c8ff;
    color: #64c8ff;
    box-shadow: 0 0 15px rgba(100, 200, 255, 0.4);
  }

  .integration {
    border-color: #9e8cff;
    color: #9e8cff;
    box-shadow: 0 0 15px rgba(158, 140, 255, 0.4);
  }

  .automation {
    border-color: #b042ff;
    color: #b042ff;
    box-shadow: 0 0 15px rgba(176, 66, 255, 0.5);
  }

  .data {
    border-color: #d750d7;
    color: #d750d7;
    box-shadow: 0 0 15px rgba(215, 80, 215, 0.4);
  }

  .digital {
    border-color: #ff64c8;
    color: #ff64c8;
    box-shadow: 0 0 15px rgba(255, 100, 200, 0.4);
  }

  /* Efectos al pasar el mouse por encima */
  .stage-icon:hover {
    transform: scale(1.1);
    box-shadow: 0 0 20px currentColor;
  }

  /* Estado activo para etapas */
  .roadmap-stage.active .stage-icon {
    transform: scale(1.1);
    box-shadow: 0 0 20px currentColor;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% {
      box-shadow: 0 0 20px currentColor;
    }
    50% {
      box-shadow: 0 0 30px currentColor;
    }
  }

  /* Ajustes específicos para la barra de progreso */
  .progress-section {
    width: 100%;
    margin-top: auto;
    padding: 0;
    position: relative;
    bottom: 0;
    margin-bottom: 20px;
    transition: all 0.3s ease-in-out;
  }

  .progress-label {
    font-family: 'Space Mono', monospace;
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.7);
    margin-bottom: 8px;
  }

  .progress-container {
    position: relative;
    width: 100%;
    height: 30px;
  }

  .progress-bar {
    height: 8px;
    background-color: rgba(30, 30, 50, 0.5);
    border-radius: 4px;
    position: relative;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    width: 0%;
    background: linear-gradient(90deg, rgba(100, 200, 255, 0.7) 0%, rgba(176, 66, 255, 0.7) 50%, rgba(255, 100, 200, 0.7) 100%);
    border-radius: 4px;
  }

  .status-marker {
    position: absolute;
    top: -6px;
    left: 0;
    width: 20px;
    height: 20px;
    background-color: #b042ff;
    border-radius: 50%;
    transform: translateX(-50%);
    box-shadow: 0 0 10px rgba(176, 66, 255, 0.7);
    z-index: 5;
  }

  .marker-label {
    position: absolute;
    top: -25px;
    left: 50%;
    transform: translateX(-50%);
    white-space: nowrap;
    font-family: 'Space Grotesk', sans-serif;
    font-size: 0.7rem;
    color: #fff;
    background-color: rgba(176, 66, 255, 0.5);
    padding: 3px 8px;
    border-radius: 4px;
  }

  /* Partículas flotantes */
  .floating-particles {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    pointer-events: none;
  }

  .particle {
    position: absolute;
    width: 6px;
    height: 6px;
    border-radius: 50%;
    opacity: 0.7;
    filter: blur(1px);
  }

  .particle.p1 {
    background-color: #64c8ff;
    box-shadow: 0 0 10px #64c8ff;
    top: 20%;
    left: 20%;
    animation: float-particle 15s infinite ease-in-out;
  }

  .particle.p2 {
    background-color: #b042ff;
    box-shadow: 0 0 10px #b042ff;
    top: 65%;
    left: 40%;
    animation: float-particle 12s infinite ease-in-out reverse;
  }

  .particle.p3 {
    background-color: #ff64c8;
    box-shadow: 0 0 10px #ff64c8;
    top: 30%;
    left: 70%;
    animation: float-particle 18s infinite ease-in-out;
  }

  .particle.p4 {
    background-color: #4aef9e;
    box-shadow: 0 0 10px #4aef9e;
    top: 60%;
    left: 85%;
    animation: float-particle 10s infinite ease-in-out reverse;
  }

  @keyframes float-particle {
    0%, 100% {
      transform: translate(0, 0);
    }
    25% {
      transform: translate(30px, 15px);
    }
    50% {
      transform: translate(0, 30px);
    }
    75% {
      transform: translate(-30px, 15px);
    }
  }

  /* Panel de beneficios */
  .benefits-panel {
    background-color: rgba(15, 15, 25, 0.7);
    border-top: 1px solid rgba(176, 66, 255, 0.3);
    padding: 12px 20px;
    margin-top: 0;
  }

  .benefits-title {
    font-family: 'Space Mono', monospace;
    font-size: 1rem;
    font-weight: 700;
    color: #fff;
    margin-bottom: 12px;
  }

  .benefits-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 15px;
  }

  .benefit-item {
    background-color: rgba(30, 30, 50, 0.5);
    border-radius: 8px;
    padding: 12px 15px;
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .benefit-icon {
    width: 40px;
    height: 40px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .benefit-icon.efficiency {
    background-color: rgba(74, 239, 158, 0.1);
    color: #4aef9e;
  }

  .benefit-icon.agility {
    background-color: rgba(250, 200, 100, 0.1);
    color: #fac864;
  }

  .benefit-icon.data {
    background-color: rgba(100, 200, 255, 0.1);
    color: #64c8ff;
  }

  .benefit-content {
    flex-grow: 1;
  }

  .benefit-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 0.75rem;
    color: rgba(255, 255, 255, 0.7);
    margin-bottom: 5px;
  }

  .benefit-value {
    font-family: 'Space Mono', monospace;
    font-size: 1.2rem;
    font-weight: 700;
    color: #fff;
  }

  /* Media queries - Completamente rediseñados para una mejor visualización en móvil */
  @media (max-width: 768px) {
    .transformation-container {
      padding: 15px;
      height: auto;
      min-height: 300px;
    }
    
    .roadmap-wrapper {
      margin-bottom: 20px;
    }
    
    .transformation-roadmap {
      flex-direction: column;
      align-items: flex-start;
      padding-left: 20px;
      margin-top: 10px;
    }
    
    .roadmap-stage {
      width: 100%;
      flex-direction: row;
      margin-bottom: 12px;
    }
    
    .stage-node {
      margin-right: 15px;
      margin-bottom: 0;
    }
    
    .stage-icon {
      width: 40px;
      height: 40px;
    }
    
    .stage-connector {
      height: calc(100% + 15px);
      width: 3px;
      top: 0;
      left: -20px;
      right: auto;
      background: linear-gradient(to bottom, 
        rgba(100, 200, 255, 0.3) 0%, 
        rgba(176, 66, 255, 0.7) 50%,
        rgba(255, 100, 200, 0.3) 100%);
    }
    
    .roadmap-stage[data-stage="1"] .stage-connector {
      top: 50%;
      height: 50%;
      background: linear-gradient(to bottom, 
        rgba(176, 66, 255, 0.7) 0%, 
        rgba(255, 100, 200, 0.3) 100%);
    }
    
    .roadmap-stage[data-stage="5"] .stage-connector {
      height: 50%;
      bottom: 50%;
      top: auto;
      background: linear-gradient(to bottom, 
        rgba(100, 200, 255, 0.3) 0%, 
        rgba(176, 66, 255, 0.7) 100%);
    }
    
    /* Reducir el espacio que ocupa la barra de progreso */
    .progress-section {
      position: relative;
      margin-top: 5px;
      margin-bottom: 10px;
    }
    
    /* Ajustar panel de beneficios */
    .benefits-panel {
      padding: 10px;
    }
    
    .benefits-grid {
      grid-template-columns: repeat(3, 1fr);
      gap: 8px;
    }
    
    .benefit-item {
      padding: 8px;
    }
    
    .benefit-icon {
      width: 30px;
      height: 30px;
    }
    
    .benefit-value {
      font-size: 0.9rem;
    }
  }
  
  /* Pantallas pequeñas - rediseño completo para móviles */
  @media (max-width: 480px) {
    .digital-transformation-visualization {
      height: 100%;
      display: flex;
      flex-direction: column;
    }
    
    .transformation-container {
      padding: 10px;
      min-height: 0;
      flex: 1;
    }
    
    /* Reducir tamaño del header */
    .roadmap-header h3 {
      font-size: 0.9rem;
    }
    
    .roadmap-subtitle {
      font-size: 0.65rem;
    }
    
    /* Compactar las etapas */
    .roadmap-stage {
      margin-bottom: 8px;
    }
    
    .stage-icon {
      width: 30px;
      height: 30px;
    }
    
    .stage-title {
      font-size: 0.65rem;
    }
    
    .stage-desc {
      font-size: 0.6rem;
    }
    
    /* Simplificar información */
    .stage-info {
      max-width: 100%;
    }
    
    /* Barra de progreso más compacta */
    .progress-section {
      display: flex;
      flex-direction: column;
      margin: 0;
      padding: 0;
    }
    
    .progress-label {
      font-size: 0.65rem;
      margin-bottom: 5px;
    }
    
    .progress-container {
      height: 20px;
    }
    
    .progress-bar {
      height: 6px;
    }
    
    .status-marker {
      width: 15px;
      height: 15px;
      top: -5px;
    }
    
    .marker-label {
      font-size: 0.55rem;
      top: -20px;
      padding: 2px 5px;
    }
    
    /* Panel de beneficios extremadamente compacto o parcialmente oculto */
    .benefits-panel {
      padding: 8px;
      margin-top: auto;
      height: auto;
      max-height: 40%;
    }
    
    .benefits-title {
      font-size: 0.8rem;
      margin-bottom: 6px;
    }
    
    /* Mostrar solo un beneficio en móvil o mostrarlos muy compactos */
    .benefits-grid {
      display: flex;
      flex-direction: column;
      gap: 6px;
    }
    
    .benefit-item {
      padding: 6px 8px;
      display: flex;
      align-items: center;
    }
    
    .benefit-icon {
      width: 24px;
      height: 24px;
      margin-right: 8px;
    }
    
    .benefit-title {
      font-size: 0.65rem;
    }
    
    .benefit-value {
      font-size: 0.85rem;
    }
  }
  
  /* Solución específica para dispositivos extra pequeños */
  @media (max-width: 360px) {
    .transformation-container {
      padding: 8px;
    }
    
    .roadmap-header h3 {
      font-size: 0.85rem;
    }
    
    .roadmap-subtitle {
      font-size: 0.6rem;
    }
    
    .stage-icon {
      width: 26px;
      height: 26px;
    }
    
    .stage-connector {
      left: -15px;
    }
    
    .stage-icon svg {
      width: 14px;
      height: 14px;
    }
    
    .stage-title {
      font-size: 0.6rem;
    }
    
    .stage-desc {
      display: none; /* Ocultar descripciones en pantallas muy pequeñas */
    }
    
    /* Ocultar ciertas partículas para aligerar visualmente */
    .particle.p3, .particle.p4 {
      display: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Referencias a elementos DOM
    const progressFill = document.getElementById('progressFill');
    const statusMarker = document.getElementById('statusMarker');
    const stages = document.querySelectorAll('.roadmap-stage');
    
    // Función para animar los valores de beneficios
    function animateBenefitValues(): void {
      const benefitValues = document.querySelectorAll('.benefit-value');
      
      benefitValues.forEach((valueElement) => {
        const targetValueText = valueElement.textContent || '+0%';
        const targetValue = parseInt(targetValueText.replace(/[^0-9.-]/g, ''));
        let startValue = 0;
        let duration = 2000; // 2 segundos
        
        const startTime = performance.now();
        
        function updateValue(timestamp: number): void {
          const elapsed = timestamp - startTime;
          let progress = elapsed / duration;
          
          if (progress > 1) progress = 1;
          
          // Función de ease-out para una animación más natural
          progress = 1 - Math.pow(1 - progress, 3);
          
          const currentValue = Math.floor(startValue + (targetValue - startValue) * progress);
          valueElement.textContent = '+' + currentValue + '%';
          
          if (progress < 1) {
            requestAnimationFrame(updateValue);
          }
        }
        
        requestAnimationFrame(updateValue);
      });
    }
    
    // Obtener los porcentajes correspondientes a cada etapa
    function getStagePercentages(): number[] {
      const stageCount = stages.length;
      const percentages: number[] = [];
      
      // Calculamos los porcentajes para cada etapa (distribución uniforme)
      const stageWidth = 100 / stageCount;
      
      for (let i = 1; i <= stageCount; i++) {
        percentages.push(i * stageWidth);
      }
      
      return percentages;
    }
    
    // Función para actualizar el progreso
    function updateProgress(percentage: number): void {
      // Asegurarnos de que el porcentaje esté entre 0 y 100
      percentage = Math.max(0, Math.min(100, percentage));
      
      if (progressFill) {
        progressFill.style.width = `${percentage}%`;
      }
      
      if (statusMarker) {
        statusMarker.style.left = `${percentage}%`;
      }
      
      // Actualizar etapas según el progreso
      updateStages(percentage);
    }
    
    // Función para actualizar las etapas en base al progreso
    function updateStages(progress: number): void {
      const stagePercentages = getStagePercentages();
      
      stages.forEach((stage, index) => {
        const currentStagePercentage = stagePercentages[index];
        const prevStagePercentage = index > 0 ? stagePercentages[index - 1] : 0;
        
        // Resetear clases
        stage.classList.remove('active', 'completed');
        
        if (progress >= currentStagePercentage) {
          // Etapa completada
          stage.classList.add('completed');
        } else if (progress > prevStagePercentage && progress < currentStagePercentage) {
          // Etapa activa (actual)
          stage.classList.add('active');
        }
      });
    }
    
    // Función para animar la barra de progreso a un valor específico con una duración dada
    function animateProgressTo(targetPercentage: number, duration: number, callback?: () => void): void {
      if (!progressFill || !statusMarker) return;
      
      const startWidth = parseFloat(progressFill.style.width || '0');
      const startLeft = parseFloat(statusMarker.style.left || '0');
      
      const startTime = performance.now();
      
      function step(timestamp: number): void {
        const elapsed = timestamp - startTime;
        let progress = Math.min(elapsed / duration, 1);
        
        // Aplicar función de suavizado para movimiento más natural
        progress = progress < 0.5
          ? 4 * progress * progress * progress
          : 1 - Math.pow(-2 * progress + 2, 3) / 2;
        
        const currentWidth = startWidth + (targetPercentage - startWidth) * progress;
        const currentLeft = startLeft + (targetPercentage - startLeft) * progress;
        
        if (progressFill) progressFill.style.width = `${currentWidth}%`;
        if (statusMarker) statusMarker.style.left = `${currentLeft}%`;
        
        // Actualizar etapas basadas en el progreso actual
        updateStages(currentWidth);
        
        if (progress < 1) {
          requestAnimationFrame(step);
        } else if (callback) {
          callback();
        }
      }
      
      requestAnimationFrame(step);
    }
    
    // Iniciar la animación secuencial a cada etapa hasta el estado actual
    function startProgressAnimation(): void {
      const targetInitialProgress = 75;
      const stagePercentages = getStagePercentages();
      
      // Retraso inicial para asegurar que todo esté renderizado
      setTimeout(() => {
        // Comenzar en 0
        updateProgress(0);
        
        // Encontrar hasta qué etapa corresponde el 75% de progreso
        let activeStageIndex = 0;
        for (let i = 0; i < stagePercentages.length; i++) {
          if (targetInitialProgress <= stagePercentages[i]) {
            activeStageIndex = i;
            break;
          }
        }
        
        // Animación secuencial a través de las etapas hasta la etapa activa
        let currentStage = 0;
        
        function animateNextStage(): void {
          if (currentStage > activeStageIndex) {
            // Si llegamos a la etapa activa, hacer ajustes periódicos
            setupPeriodicAdjustments();
            return;
          }
          
          // Si es la etapa activa final, animar hasta el porcentaje exacto (75%)
          const targetPercentage = currentStage === activeStageIndex
            ? targetInitialProgress
            : stagePercentages[currentStage] - 5; // Restar un pequeño margen
          
          animateProgressTo(targetPercentage, 1000, () => {
            currentStage++;
            setTimeout(animateNextStage, 500);
          });
        }
        
        // Iniciar la secuencia de animación después de un breve retraso
        setTimeout(animateNextStage, 500);
      }, 1000);
    }
    
    // Configurar ajustes periódicos después de alcanzar la posición inicial
    function setupPeriodicAdjustments(): void {
      setInterval(() => {
        if (!progressFill) return;
        
        const currentWidth = parseFloat(progressFill.style.width || '75');
        
        // Generar variación aleatoria entre -3% y +3%
        const delta = Math.random() * 6 - 3;
        const newProgress = Math.max(60, Math.min(95, currentWidth + delta));
        
        // Animar al nuevo valor de forma suave
        animateProgressTo(newProgress, 2000, undefined);
      }, 8000);
    }
    
    // Inicializar animaciones - con retraso adaptativo para dispositivos
    function initAnimations(): void {
      // Detectar si es un dispositivo móvil para optimizar rendimiento
      const isMobile = window.innerWidth <= 768;
      const initDelay = isMobile ? 800 : 500; // Dar más tiempo en móviles
      
      setTimeout(() => {
        animateBenefitValues();
        startProgressAnimation();
      }, initDelay);
    }
    
    // Iniciar una vez que el DOM esté listo
    initAnimations();
    
    // Re-iniciar animaciones si el componente se vuelve visible después del scroll
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && progressFill) {
          // Reiniciar animaciones si el componente entra en el viewport
          if (progressFill.style.width === '0%') {
            initAnimations();
          }
        }
      });
    }, { threshold: 0.2 }); // Activar cuando al menos 20% del componente sea visible
    
    // Observar el componente
    const component = document.querySelector('.digital-transformation-visualization');
    if (component) {
      observer.observe(component);
    }
  });
</script>