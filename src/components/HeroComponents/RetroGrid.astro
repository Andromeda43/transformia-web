---
const { class: className = "", perspective = false, glowPosition = "center", fixedToViewport = false } = Astro.props;
---

<div class={`retro-grid ${className} ${perspective ? 'perspective' : ''} ${fixedToViewport ? 'fixed' : 'absolute'}`} data-glow-position={glowPosition}>
  <div class="grid-lines"></div>
  <div class="grid-glow"></div>
</div>

<style>
  .retro-grid {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    overflow: hidden;
    pointer-events: none;
  }
  
  .fixed {
    position: fixed;
  }
  
  .absolute {
    position: absolute;
  }

  .grid-lines {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
      linear-gradient(to right, rgba(128, 90, 213, 0.2) 1px, transparent 1px),
      linear-gradient(to bottom, rgba(128, 90, 213, 0.2) 1px, transparent 1px);
    background-size: 40px 40px;
    animation: grid-flow 15s linear infinite;
  }
  
  .perspective .grid-lines {
    transform: perspective(500px) rotateX(60deg);
    transform-origin: center bottom;
    height: 100%;
    bottom: -40%;
    top: auto;
  }

  .grid-glow {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at var(--x, 50%) var(--y, 50%), rgba(176, 66, 255, 0.15) 0%, rgba(10, 10, 20, 0) 70%);
    pointer-events: none;
  }
  
  .retro-grid[data-glow-position="top-left"] .grid-glow {
    --x: 25%;
    --y: 25%;
  }
  
  .retro-grid[data-glow-position="top-right"] .grid-glow {
    --x: 75%;
    --y: 25%;
  }
  
  .retro-grid[data-glow-position="bottom-left"] .grid-glow {
    --x: 25%;
    --y: 75%;
  }
  
  .retro-grid[data-glow-position="bottom-right"] .grid-glow {
    --x: 75%;
    --y: 75%;
  }
  
  .retro-grid[data-glow-position="center"] .grid-glow {
    --x: 50%;
    --y: 50%;
  }

  @keyframes grid-flow {
    0% { background-position: 0px 0px; }
    100% { background-position: 40px 40px; }
  }
  
  @media (max-width: 768px) {
    .grid-lines {
      background-size: 30px 30px;
    }
    
    @keyframes grid-flow {
      0% { background-position: 0px 0px; }
      100% { background-position: 30px 30px; }
    }
  }
</style>

<script>
  // Mouse follow effect for the grid glow
  document.addEventListener('DOMContentLoaded', () => {
    const retroGrids = document.querySelectorAll('.retro-grid');
    
    retroGrids.forEach(grid => {
      // Solución al error: usar instanceof para verificar el tipo
      if (grid instanceof HTMLElement && grid.dataset.glowPosition === 'follow') {
        const glow = grid.querySelector('.grid-glow');
        
        document.addEventListener('mousemove', (e) => {
          const x = (e.clientX / window.innerWidth) * 100;
          const y = (e.clientY / window.innerHeight) * 100;
          
          // También verificamos que glow sea HTMLElement
          if (glow instanceof HTMLElement) {
            glow.style.setProperty('--x', `${x}%`);
            glow.style.setProperty('--y', `${y}%`);
          }
        });
      }
    });
  });
</script>