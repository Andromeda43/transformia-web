---
---

<div class="realtime-dashboard-visualization">
    <div class="dashboard-container">
      <!-- Cabecera del dashboard -->
      <div class="dashboard-header">
        <div class="dashboard-title">
          <svg class="dashboard-icon" viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="3" y1="9" x2="21" y2="9"></line>
            <line x1="9" y1="21" x2="9" y2="9"></line>
          </svg>
          <h3>Métricas en Tiempo Real</h3>
        </div>
        <div class="update-status">
          <div class="status-indicator"></div>
          <span>Actualización en vivo</span>
        </div>
      </div>
      
      <!-- Panel de métricas principales -->
      <div class="metrics-panel">
        <div class="metric-card growth">
          <div class="metric-icon">
            <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M23 6l-9.5 9.5-5-5L1 18"></path>
              <path d="M17 6h6v6"></path>
            </svg>
          </div>
          <div class="metric-content">
            <div class="metric-label">Crecimiento</div>
            <div class="metric-value" id="growth-value">+54.0%</div>
            <div class="metric-change positive">
              <svg viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="18 15 12 9 6 15"></polyline>
              </svg>
              <span>7.2%</span>
            </div>
          </div>
        </div>
        
        <div class="metric-card efficiency">
          <div class="metric-icon">
            <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"></circle>
              <polyline points="12 6 12 12 16 14"></polyline>
            </svg>
          </div>
          <div class="metric-content">
            <div class="metric-label">Eficiencia</div>
            <div class="metric-value" id="efficiency-value">+61.5%</div>
            <div class="metric-change positive">
              <svg viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="18 15 12 9 6 15"></polyline>
              </svg>
              <span>4.3%</span>
            </div>
          </div>
        </div>
        
        <div class="metric-card savings">
          <div class="metric-icon">
            <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 1v22"></path>
              <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
            </svg>
          </div>
          <div class="metric-content">
            <div class="metric-label">Ahorro</div>
            <div class="metric-value" id="savings-value">$13.2K</div>
            <div class="metric-change positive">
              <svg viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="18 15 12 9 6 15"></polyline>
              </svg>
              <span>9.7%</span>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Gráficos y visualizaciones -->
      <div class="charts-container">
        <!-- Gráfico de barras animado -->
        <div class="chart-card">
          <div class="chart-header">
            <h4>Rendimiento por Sector</h4>
            <div class="time-filter">
              <span class="filter-option active">Día</span>
              <span class="filter-option">Semana</span>
              <span class="filter-option">Mes</span>
            </div>
          </div>
          <div class="bar-chart">
            <div class="sector-labels">
              <div class="sector-label">SEO</div>
              <div class="sector-label">SEM</div>
              <div class="sector-label">Social</div>
              <div class="sector-label">Email</div>
              <div class="sector-label">Directo</div>
            </div>
            <div class="chart-bars">
              <div class="bar-group">
                <div class="bar-item">
                  <div class="bar-track">
                    <div class="bar-fill" style="height: 71%">
                      <span class="bar-value">71%</span>
                    </div>
                  </div>
                </div>
                <div class="bar-item">
                  <div class="bar-track">
                    <div class="bar-fill" style="height: 74%">
                      <span class="bar-value">74%</span>
                    </div>
                  </div>
                </div>
                <div class="bar-item">
                  <div class="bar-track">
                    <div class="bar-fill" style="height: 70%">
                      <span class="bar-value">70%</span>
                    </div>
                  </div>
                </div>
                <div class="bar-item">
                  <div class="bar-track">
                    <div class="bar-fill" style="height: 59%">
                      <span class="bar-value">59%</span>
                    </div>
                  </div>
                </div>
                <div class="bar-item">
                  <div class="bar-track">
                    <div class="bar-fill" style="height: 57%">
                      <span class="bar-value">57%</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Gráfico circular con progreso -->
        <div class="chart-card">
          <div class="chart-header">
            <h4>Objetivos Completados</h4>
          </div>
          <div class="circular-progress-container">
            <div class="circular-progress">
              <svg viewBox="0 0 120 120" width="120" height="120">
                <circle cx="60" cy="60" r="50" fill="none" stroke="#303150" stroke-width="8"></circle>
                <circle cx="60" cy="60" r="50" class="progress-ring" fill="none" stroke="#b042ff" stroke-width="10" stroke-linecap="round" stroke-dasharray="314.1593" stroke-dashoffset="56.5487"></circle>
              </svg>
              <div class="progress-text">
                <span class="progress-percentage">82%</span>
                <span class="progress-label">Metas</span>
              </div>
            </div>
            <div class="progress-stats">
              <div class="stat-item">
                <div class="stat-dot" style="background-color: #4aef9e"></div>
                <div class="stat-text">Completadas</div>
                <div class="stat-value">18</div>
              </div>
              <div class="stat-item">
                <div class="stat-dot" style="background-color: rgba(176, 66, 255, 0.7)"></div>
                <div class="stat-text">En progreso</div>
                <div class="stat-value">6</div>
              </div>
              <div class="stat-item">
                <div class="stat-dot" style="background-color: rgba(255, 100, 100, 0.7)"></div>
                <div class="stat-text">Pendientes</div>
                <div class="stat-value">4</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <style>
    .realtime-dashboard-visualization {
      background-color: rgba(20, 20, 35, 0.85);
      border-radius: 10px;
      border: 1px solid rgba(176, 66, 255, 0.5);
      overflow: hidden;
      box-shadow: 
        0 0 15px rgba(176, 66, 255, 0.3),
        0 0 30px rgba(176, 66, 255, 0.1);
      backdrop-filter: blur(10px);
      height: 100%;
      display: flex;
      flex-direction: column;
      position: relative;
    }
  
    /* Contenedor principal del dashboard */
    .dashboard-container {
      padding: 20px;
      display: flex;
      flex-direction: column;
      gap: 20px;
      height: 100%;
      background: linear-gradient(135deg, rgba(30, 30, 60, 0.5) 0%, rgba(15, 15, 30, 0.7) 100%);
    }
  
    /* Cabecera del dashboard */
    .dashboard-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
  
    .dashboard-title {
      display: flex;
      align-items: center;
      gap: 10px;
    }
  
    .dashboard-icon {
      color: #b042ff;
      width: 24px;
      height: 24px;
    }
  
    .dashboard-title h3 {
      font-family: 'Space Mono', monospace;
      font-size: 1rem;
      font-weight: 700;
      color: #fff;
      margin: 0;
    }
  
    .update-status {
      display: flex;
      align-items: center;
      gap: 8px;
      font-family: 'Space Mono', monospace;
      font-size: 0.7rem;
      color: rgba(255, 255, 255, 0.7);
    }
  
    .status-indicator {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background-color: #4aef9e;
      position: relative;
    }
  
    .status-indicator::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      border-radius: 50%;
      background-color: #4aef9e;
      opacity: 0.5;
      animation: pulse 1.5s infinite;
    }
  
    @keyframes pulse {
      0% {
        transform: scale(1);
        opacity: 0.5;
      }
      100% {
        transform: scale(2.5);
        opacity: 0;
      }
    }
  
    /* Panel de métricas principales */
    .metrics-panel {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 15px;
    }
  
    .metric-card {
      background-color: rgba(30, 30, 50, 0.7);
      border-radius: 8px;
      padding: 15px;
      display: flex;
      align-items: center;
      gap: 15px;
      transition: all 0.3s ease;
      border: 1px solid transparent;
    }
  
    .metric-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }
  
    .metric-card.growth {
      border-color: rgba(74, 239, 158, 0.3);
    }
  
    .metric-card.efficiency {
      border-color: rgba(176, 66, 255, 0.3);
    }
  
    .metric-card.savings {
      border-color: rgba(66, 135, 255, 0.3);
    }
  
    .metric-icon {
      width: 40px;
      height: 40px;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
  
    .growth .metric-icon {
      background-color: rgba(74, 239, 158, 0.1);
      color: #4aef9e;
    }
  
    .efficiency .metric-icon {
      background-color: rgba(176, 66, 255, 0.1);
      color: #b042ff;
    }
  
    .savings .metric-icon {
      background-color: rgba(66, 135, 255, 0.1);
      color: #4287ff;
    }
  
    .metric-content {
      flex-grow: 1;
    }
  
    .metric-label {
      font-family: 'Space Grotesk', sans-serif;
      font-size: 0.7rem;
      color: rgba(255, 255, 255, 0.7);
      margin-bottom: 5px;
    }
  
    .metric-value {
      font-family: 'Space Mono', monospace;
      font-size: 1.2rem;
      font-weight: 700;
      color: #fff;
      margin-bottom: 5px;
    }
  
    .metric-change {
      display: flex;
      align-items: center;
      gap: 5px;
      font-family: 'Space Mono', monospace;
      font-size: 0.7rem;
    }
  
    .metric-change.positive {
      color: #4aef9e;
    }
  
    .metric-change.negative {
      color: #ff647a;
    }
  
    /* Gráficos y visualizaciones */
    .charts-container {
      display: grid;
      grid-template-columns: 3fr 2fr;
      gap: 15px;
      flex-grow: 1;
    }
  
    .chart-card {
      background-color: rgba(30, 30, 50, 0.7);
      border-radius: 8px;
      padding: 15px;
      display: flex;
      flex-direction: column;
    }
  
    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
  
    .chart-header h4 {
      font-family: 'Space Mono', monospace;
      font-size: 0.8rem;
      font-weight: 700;
      color: #fff;
      margin: 0;
    }
  
    .time-filter {
      display: flex;
      gap: 8px;
    }
  
    .filter-option {
      font-family: 'Space Grotesk', sans-serif;
      font-size: 0.7rem;
      color: rgba(255, 255, 255, 0.5);
      cursor: pointer;
      transition: all 0.3s ease;
      padding: 2px 8px;
      border-radius: 10px;
    }
  
    .filter-option:hover {
      color: rgba(255, 255, 255, 0.8);
    }
  
    .filter-option.active {
      color: #fff;
      background-color: rgba(176, 66, 255, 0.2);
    }
  
    /* Gráfico de barras */
    .bar-chart {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }
  
    .sector-labels {
      display: flex;
      justify-content: space-between;
      margin-top: auto;
    }
  
    .sector-label {
      font-family: 'Space Grotesk', sans-serif;
      font-size: 0.65rem;
      color: rgba(255, 255, 255, 0.6);
      text-align: center;
      width: 20%;
    }
  
    .chart-bars {
      flex-grow: 1;
      display: flex;
      align-items: flex-end;
      margin-bottom: 10px;
    }
  
    .bar-group {
      display: flex;
      justify-content: space-between;
      width: 100%;
      height: 100%;
    }
  
    .bar-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 20%;
      height: 100%;
    }
  
    .bar-track {
      width: 30px;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.05);
      border-radius: 4px;
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      overflow: hidden;
      position: relative;
    }
  
    .bar-fill {
      width: 100%;
      background: linear-gradient(to top, rgba(176, 66, 255, 0.9), rgba(255, 100, 200, 0.9));
      border-radius: 4px;
      transition: height 1.5s cubic-bezier(0.34, 1.56, 0.64, 1);
      position: relative;
      animation: bar-rise 2s ease-out forwards;
      transform-origin: bottom;
      box-shadow: 0 0 10px rgba(176, 66, 255, 0.5);
    }
  
    @keyframes bar-rise {
      0% {
        height: 0;
        opacity: 0;
      }
      100% {
        opacity: 1;
      }
    }
  
    .bar-value {
      position: absolute;
      top: -20px;
      left: 50%;
      transform: translateX(-50%);
      font-family: 'Space Mono', monospace;
      font-size: 0.65rem;
      color: #fff;
      white-space: nowrap;
    }
  
    /* Gráfico circular */
    .circular-progress-container {
      display: flex;
      height: 100%;
      align-items: center;
      gap: 15px;
    }
  
    .circular-progress {
      position: relative;
      width: 120px;
      height: 120px;
      display: flex;
      justify-content: center;
      align-items: center;
    }
  
    .progress-ring {
      transform-origin: center;
      transform: rotate(-90deg);
      transition: stroke-dashoffset 1.5s ease;
      animation: circle-progress 2s ease-out forwards;
    }
  
    @keyframes circle-progress {
      0% {
        stroke-dashoffset: 314.1593;
      }
    }
  
    .progress-text {
      position: absolute;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }
  
    .progress-percentage {
      font-family: 'Space Mono', monospace;
      font-size: 1.2rem;
      font-weight: 700;
      color: #fff;
    }
  
    .progress-label {
      font-family: 'Space Grotesk', sans-serif;
      font-size: 0.7rem;
      color: rgba(255, 255, 255, 0.7);
    }
  
    .progress-stats {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      justify-content: center;
      gap: 10px;
    }
  
    .stat-item {
      display: flex;
      align-items: center;
      gap: 8px;
    }
  
    .stat-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
    }
  
    .stat-text {
      font-family: 'Space Grotesk', sans-serif;
      font-size: 0.7rem;
      color: rgba(255, 255, 255, 0.7);
      flex-grow: 1;
    }
  
    .stat-value {
      font-family: 'Space Mono', monospace;
      font-size: 0.8rem;
      color: #fff;
      font-weight: 700;
    }
  
    /* Media queries */
    @media (max-width: 768px) {
      .dashboard-container {
        padding: 15px;
        gap: 15px;
      }
  
      .metrics-panel {
        grid-template-columns: repeat(3, 1fr);
        gap: 10px;
      }
  
      .charts-container {
        grid-template-columns: 1fr;
      }
  
      .chart-card {
        height: 180px;
      }
    }
  </style>
  
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Función para actualizar los valores de métricas periódicamente
      function updateMetrics() {
        const metrics = [
          { 
            id: 'growth-value',
            baseValue: 54.0,
            min: -1,
            max: 1
          },
          { 
            id: 'efficiency-value',
            baseValue: 61.5,
            min: -0.8,
            max: 0.8
          },
          {
            id: 'savings-value',
            baseValue: 13.2,
            min: -0.5,
            max: 0.5,
            isMonetary: true
          }
        ];
        
        metrics.forEach(metric => {
          const element = document.getElementById(metric.id);
          if (!element) return;
          
          // Obtener el valor actual
          let currentValue = metric.baseValue;
          
          // Actualizar periódicamente
          setInterval(() => {
            // Generar variación aleatoria dentro del rango
            const variation = Math.random() * (metric.max - metric.min) + metric.min;
            const newValue = Math.max(0, currentValue + variation);
            
            // Formatear y actualizar el valor
            if (metric.isMonetary) {
              element.textContent = `$${newValue.toFixed(1)}K`;
            } else {
              element.textContent = `+${newValue.toFixed(1)}%`;
            }
            
            // Actualizar referencia para la próxima iteración
            currentValue = newValue;
          }, 5000 + Math.random() * 3000); // Intervalo ligeramente aleatorizado
        });
      }
      
      // Función para animar las barras periódicamente
      function animateBars() {
        const bars = document.querySelectorAll('.bar-fill');
        
        bars.forEach(bar => {
          // Usamos getAttribute para evitar errores de TypeScript
          const heightStr = bar.getAttribute('style')?.match(/height:\s*(\d+)%/)?.[1] || '50';
          const currentHeight = parseInt(heightStr, 10);
          const barValue = bar.querySelector('.bar-value');
          
          setInterval(() => {
            // Generar nueva altura aleatoria (±5% del valor actual)
            const delta = (Math.random() - 0.5) * 10;
            let newHeight = Math.max(40, Math.min(95, currentHeight + delta));
            
            // Actualizar altura
            if (bar instanceof HTMLElement) {
              bar.style.height = `${newHeight}%`;
            }
            
            // Actualizar texto del valor
            if (barValue) {
              barValue.textContent = `${Math.round(newHeight)}%`;
            }
          }, 6000 + Math.random() * 4000);
        });
      }
      
      // Función para animar el gráfico circular periódicamente
      function animateCircularProgress() {
        const progressRing = document.querySelector('.progress-ring');
        const progressText = document.querySelector('.progress-percentage');
        
        if (!progressRing || !progressText) return;
        
        // Circunferencia del círculo (2πr)
        const circumference = 2 * Math.PI * 50;
        let currentPercentage = 82; // Valor inicial
        
        setInterval(() => {
          // Generar nuevo porcentaje aleatorio (±3% del valor actual)
          const delta = (Math.random() - 0.5) * 6;
          currentPercentage = Math.max(75, Math.min(89, currentPercentage + delta));
          
          // Calcular offset para el círculo
          const offset = circumference - (circumference * currentPercentage / 100);
          
          // Actualizar circle
          if (progressRing instanceof SVGElement) {
            progressRing.setAttribute('stroke-dashoffset', offset.toString());
          }
          
          // Actualizar texto
          if (progressText) {
            progressText.textContent = `${Math.round(currentPercentage)}%`;
          }
        }, 8000);
      }
      
      // Función para animar opciones de filtro
      function setupFilterOptions() {
        const filterOptions = document.querySelectorAll('.filter-option');
        
        filterOptions.forEach(option => {
          option.addEventListener('click', () => {
            // Desactivar todas las opciones
            filterOptions.forEach(opt => opt.classList.remove('active'));
            
            // Activar la opción seleccionada
            option.classList.add('active');
            
            // Simular cambio en gráfico (reanimación de barras)
            const bars = document.querySelectorAll('.bar-fill');
            
            bars.forEach(bar => {
              // Generar nueva altura aleatoria
              const newHeight = Math.floor(Math.random() * 50) + 35; // Entre 35% y 85%
              
              // Animar cambio con efecto de transición
              if (bar instanceof HTMLElement) {
                bar.style.height = `${newHeight}%`;
                
                // Actualizar texto del valor
                const barValue = bar.querySelector('.bar-value');
                if (barValue) {
                  barValue.textContent = `${newHeight}%`;
                }
              }
            });
          });
        });
      }
      
      // Inicializar todas las animaciones después de cargar
      setTimeout(() => {
        updateMetrics();
        animateBars();
        animateCircularProgress();
        setupFilterOptions();
      }, 1000);
    });
  </script>