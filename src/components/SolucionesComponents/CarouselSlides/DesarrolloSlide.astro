---
// DesarrolloSlide.astro - Slide de Desarrollo de Software
---

<div class="desarrollo-slide">
    <div class="slide-content">
      <div class="slide-info">
        <div class="slide-header">
          <div class="service-icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="16 18 22 12 16 6"></polyline>
              <polyline points="8 6 2 12 8 18"></polyline>
            </svg>
            <div class="icon-pulse"></div>
          </div>
          
          <h3 class="slide-title">DESARROLLO DE SOFTWARE A MEDIDA</h3>
        </div>
        
        <p class="slide-description">
          Creamos aplicaciones personalizadas que resuelven tus problemas específicos, optimizando procesos y mejorando la experiencia de usuario.
        </p>
        
        <div class="service-tags">
          <span class="tag">Web</span>
          <span class="tag">Mobile</span>
          <span class="tag">Desktop</span>
        </div>
        
        <a href="/servicios/desarrollo" class="service-link">
          <span class="link-text">Conocer más</span>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="5" y1="12" x2="19" y2="12"></line>
            <polyline points="12 5 19 12 12 19"></polyline>
          </svg>
        </a>
      </div>
      
      <!-- Animación interactiva: IDE con código -->
      <div class="animation-container">
        <div class="code-editor">
          <div class="editor-header">
            <div class="editor-controls">
              <span class="control red"></span>
              <span class="control yellow"></span>
              <span class="control green"></span>
            </div>
            <div class="editor-title">app.js</div>
            <div class="editor-actions">
              <span class="action"></span>
              <span class="action"></span>
            </div>
          </div>
          <div class="editor-body">
            <div class="line-numbers">
              <span>1</span>
              <span>2</span>
              <span>3</span>
              <span>4</span>
              <span>5</span>
              <span>6</span>
              <span>7</span>
              <span>8</span>
              <span>9</span>
              <span>10</span>
              <span>11</span>
              <span>12</span>
            </div>
            <div class="code-content">
              <div class="code-line"><span class="keyword">import</span> <span class="variable">React</span> <span class="keyword">from</span> <span class="string">'react'</span>;</div>
              <div class="code-line"><span class="keyword">import</span> <span class="variable">CustomSolution</span> <span class="keyword">from</span> <span class="string">'./solutions'</span>;</div>
              <div class="code-line"></div>
              <div class="code-line"><span class="keyword">class</span> <span class="class">AppOptimizer</span> <span class="keyword">extends</span> <span class="class">React.Component</span> {</div>
              <div class="code-line typing"><span class="keyword">  constructor</span>() {</div>
              <div class="code-line hidden"><span class="keyword">    super</span>();</div>
              <div class="code-line hidden"><span class="keyword">    this</span>.<span class="property">state</span> = {</div>
              <div class="code-line hidden"><span class="property">      loading</span>: <span class="boolean">false</span>,</div>
              <div class="code-line hidden"><span class="property">      optimized</span>: <span class="boolean">false</span></div>
              <div class="code-line hidden">    }</div>
              <div class="code-line hidden">  }</div>
              <div class="code-line hidden">}</div>
            </div>
          </div>
          <div class="cursor"></div>
        </div>
        
        <div class="digital-devices">
          <div class="device laptop">
            <div class="screen"></div>
            <div class="keyboard"></div>
          </div>
          <div class="device tablet">
            <div class="screen"></div>
            <div class="button"></div>
          </div>
          <div class="device mobile">
            <div class="screen"></div>
            <div class="button"></div>
          </div>
        </div>
        
        <div class="floating-elements">
          <div class="element html-tag"><span>&lt;/&gt;</span></div>
          <div class="element css-bracket">{ }</div>
          <div class="element js-arrow">=></div>
          <div class="element react-logo">
            <svg viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
              <circle cx="50" cy="50" r="8" fill="currentColor" />
              <ellipse cx="50" cy="50" rx="25" ry="10" stroke="currentColor" stroke-width="2" transform="rotate(30 50 50)" />
              <ellipse cx="50" cy="50" rx="25" ry="10" stroke="currentColor" stroke-width="2" transform="rotate(90 50 50)" />
              <ellipse cx="50" cy="50" rx="25" ry="10" stroke="currentColor" stroke-width="2" transform="rotate(150 50 50)" />
            </svg>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <style>
    /* Estilos para el slide de Desarrollo de Software */
    .desarrollo-slide {
      --slide-color: var(--purple);
      --highlight-color: #b042ff;
      --lowlight-color: rgba(176, 66, 255, 0.5);
      --bg-glow: rgba(176, 66, 255, 0.2);
    }
    
    .slide-content {
      background: rgba(26, 20, 45, 0.8);
      backdrop-filter: blur(15px);
      border-radius: 16px;
      border: 1px solid rgba(176, 66, 255, 0.3);
      padding: 2.5rem;
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 3rem;
      position: relative;
      overflow: hidden;
      height: 500px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2), 0 0 30px rgba(176, 66, 255, 0.1);
    }
    
    .slide-content::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle at 30% 30%, var(--bg-glow) 0%, transparent 70%);
      z-index: 0;
    }
    
    /* Información del servicio */
    .slide-info {
      display: flex;
      flex-direction: column;
      position: relative;
      z-index: 2;
    }
    
    .slide-header {
      margin-bottom: 1.5rem;
    }
    
    .service-icon {
      width: 70px;
      height: 70px;
      border-radius: 12px;
      background: rgba(176, 66, 255, 0.1);
      border: 2px solid rgba(176, 66, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 1.5rem;
      color: var(--highlight-color);
      position: relative;
      transition: all 0.3s ease;
    }
    
    .service-icon svg {
      width: 35px;
      height: 35px;
    }
    
    .icon-pulse {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 100%;
      height: 100%;
      border-radius: 12px;
      border: 2px solid var(--highlight-color);
      opacity: 0;
      z-index: -1;
      animation: icon-pulse 2s infinite;
    }
    
    @keyframes icon-pulse {
      0% {
        transform: translate(-50%, -50%) scale(1);
        opacity: 0.7;
      }
      100% {
        transform: translate(-50%, -50%) scale(1.5);
        opacity: 0;
      }
    }
    
    .slide-title {
      font-family: var(--font-mono);
      font-size: 1.8rem;
      font-weight: 800;
      color: var(--highlight-color);
      line-height: 1.3;
      margin-bottom: 1.5rem;
      text-shadow: 0 0 10px rgba(176, 66, 255, 0.5);
      animation: title-glow 2s infinite alternate;
    }
    
    @keyframes title-glow {
      from {
        text-shadow: 0 0 10px rgba(176, 66, 255, 0.5);
      }
      to {
        text-shadow: 0 0 15px rgba(176, 66, 255, 0.8), 0 0 25px rgba(176, 66, 255, 0.5);
      }
    }
    
    .slide-description {
      font-family: var(--font-sans);
      font-size: 1.1rem;
      line-height: 1.7;
      color: rgba(255, 255, 255, 0.9);
      margin-bottom: 2rem;
      flex-grow: 1;
    }
    
    /* Tags */
    .service-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.8rem;
      margin-bottom: 2rem;
    }
    
    .tag {
      background: rgba(176, 66, 255, 0.1);
      border: 1px solid rgba(176, 66, 255, 0.3);
      border-radius: 20px;
      padding: 0.5rem 1rem;
      font-size: 0.9rem;
      color: rgba(255, 255, 255, 0.9);
      font-family: var(--font-mono);
      transition: all 0.3s ease;
    }
    
    .tag:hover {
      background: rgba(176, 66, 255, 0.2);
      transform: translateY(-3px);
      box-shadow: 0 3px 10px rgba(176, 66, 255, 0.3);
    }
    
    /* Enlace de servicio */
    .service-link {
      display: flex;
      align-items: center;
      justify-content: space-between;
      background: rgba(176, 66, 255, 0.1);
      border: 1px solid rgba(176, 66, 255, 0.3);
      border-radius: 8px;
      padding: 1rem 1.5rem;
      color: var(--highlight-color);
      font-family: var(--font-mono);
      font-weight: bold;
      font-size: 1rem;
      text-decoration: none;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
      margin-top: auto;
    }
    
    .service-link::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s ease;
    }
    
    .service-link:hover {
      background: var(--highlight-color);
      color: white;
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2), 0 0 10px rgba(176, 66, 255, 0.5);
    }
    
    .service-link:hover::before {
      left: 100%;
    }
    
    .service-link svg {
      width: 20px;
      height: 20px;
      margin-left: 0.5rem;
      transition: transform 0.3s ease;
    }
    
    .service-link:hover svg {
      transform: translateX(5px);
    }
    
    /* Animación de código */
    .animation-container {
      position: relative;
      z-index: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }
    
    .code-editor {
      width: 100%;
      height: 60%;
      background: #1e1e3f;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
      position: relative;
      z-index: 3;
      border: 1px solid #2d2b55;
    }
    
    .editor-header {
      background: #2d2b55;
      height: 32px;
      display: flex;
      align-items: center;
      padding: 0 1rem;
      border-bottom: 1px solid #4d4b7f;
    }
    
    .editor-controls {
      display: flex;
      gap: 8px;
    }
    
    .control {
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }
    
    .control.red {
      background: #ff5f56;
    }
    
    .control.yellow {
      background: #ffbd2e;
    }
    
    .control.green {
      background: #27c93f;
    }
    
    .editor-title {
      flex-grow: 1;
      text-align: center;
      font-family: monospace;
      font-size: 14px;
      color: rgba(255, 255, 255, 0.8);
    }
    
    .editor-actions {
      display: flex;
      gap: 8px;
    }
    
    .action {
      width: 12px;
      height: 12px;
      border-radius: 2px;
      background: rgba(255, 255, 255, 0.2);
    }
    
    .editor-body {
      display: flex;
      height: calc(100% - 32px);
      position: relative;
    }
    
    .line-numbers {
      background: #2d2b55;
      padding: 10px 10px 10px 15px;
      color: rgba(255, 255, 255, 0.5);
      font-family: monospace;
      font-size: 14px;
      user-select: none;
      text-align: right;
      display: flex;
      flex-direction: column;
      gap: 3px;
    }
    
    .code-content {
      flex-grow: 1;
      padding: 10px 15px;
      position: relative;
      overflow: hidden;
      font-family: monospace;
      font-size: 14px;
      color: white;
      display: flex;
      flex-direction: column;
      gap: 3px;
    }
    
    .code-line {
      position: relative;
      white-space: nowrap;
    }
    
    .code-line.typing {
      animation: typing 3s steps(40, end) forwards;
      overflow: hidden;
      white-space: nowrap;
      border-right: 2px solid var(--highlight-color);
      width: 0;
    }
    
    .code-line.hidden {
      opacity: 0;
    }
    
    @keyframes typing {
      from { width: 0; }
      to { width: 100%; }
    }
    
    .keyword {
      color: #ff9d00;
    }
    
    .variable {
      color: #9effff;
    }
    
    .string {
      color: #a5ff90;
    }
    
    .class {
      color: #fb94ff;
    }
    
    .property {
      color: #9effff;
    }
    
    .boolean {
      color: #ff628c;
    }
    
    .cursor {
      position: absolute;
      width: 2px;
      height: 18px;
      background-color: var(--highlight-color);
      top: 94px;
      left: 220px;
      animation: blink-caret 0.75s step-end infinite;
      opacity: 0;
    }
    
    @keyframes blink-caret {
      from, to { opacity: 0; }
      50% { opacity: 1; }
    }
    
    /* Dispositivos digitales */
    .digital-devices {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 100%;
      height: 30%;
      display: flex;
      justify-content: center;
      gap: 20px;
      transform: perspective(500px) rotateX(20deg);
      transform-origin: bottom center;
      z-index: 2;
    }
    
    .device {
      background: #333;
      border-radius: 10px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
      position: relative;
    }
    
    .laptop {
      width: 180px;
      height: 120px;
      z-index: 3;
    }
    
    .laptop .screen {
      width: 100%;
      height: 100px;
      background: #1e1e3f;
      border-radius: 10px 10px 0 0;
      overflow: hidden;
      position: relative;
    }
    
    .laptop .screen::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle at center, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
    }
    
    .laptop .keyboard {
      width: 180px;
      height: 20px;
      background: #555;
      border-radius: 0 0 10px 10px;
      position: absolute;
      bottom: 0;
    }
    
    .tablet {
      width: 100px;
      height: 130px;
      transform: translateX(-20px) translateY(10px);
      z-index: 2;
    }
    
    .tablet .screen {
      width: 100%;
      height: 120px;
      background: #1e1e3f;
      border-radius: 10px 10px 0 0;
      overflow: hidden;
      position: relative;
    }
    
    .tablet .screen::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle at center, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
    }
    
    .tablet .button {
      width: 12px;
      height: 12px;
      background: #777;
      border-radius: 50%;
      position: absolute;
      bottom: 4px;
      left: 50%;
      transform: translateX(-50%);
    }
    
    .mobile {
      width: 60px;
      height: 110px;
      transform: translateX(-30px) translateY(20px);
      z-index: 1;
    }
    
    .mobile .screen {
      width: 100%;
      height: 100px;
      background: #1e1e3f;
      border-radius: 10px 10px 0 0;
      overflow: hidden;
      position: relative;
    }
    
    .mobile .screen::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle at center, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
    }
    
    .mobile .button {
      width: 10px;
      height: 10px;
      background: #777;
      border-radius: 50%;
      position: absolute;
      bottom: 3px;
      left: 50%;
      transform: translateX(-50%);
    }
    
    /* Elementos flotantes */
    .floating-elements {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
      pointer-events: none;
    }
    
    .element {
      position: absolute;
      color: var(--lowlight-color);
      font-family: monospace;
      font-size: 16px;
      font-weight: bold;
      animation: float-element 10s infinite ease-in-out;
    }
    
    .html-tag {
      top: 20%;
      left: 10%;
      font-size: 24px;
      animation-delay: 0s;
    }
    
    .css-bracket {
      top: 50%;
      right: 10%;
      font-size: 24px;
      animation-delay: 2s;
    }
    
    .js-arrow {
      bottom: 30%;
      left: 25%;
      font-size: 20px;
      animation-delay: 4s;
    }
    
    .react-logo {
      top: 30%;
      right: 20%;
      width: 40px;
      height: 40px;
      color: var(--lowlight-color);
      animation-delay: 1s;
    }
    
    @keyframes float-element {
      0%, 100% {
        transform: translate(0, 0);
      }
      25% {
        transform: translate(10px, -15px) rotate(5deg);
      }
      50% {
        transform: translate(0, 0) rotate(0deg);
      }
      75% {
        transform: translate(-10px, 15px) rotate(-5deg);
      }
    }
    
    /* Animaciones y efectos */
    @keyframes fade-in {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    /* Media queries */
    @media (max-width: 1200px) {
      .slide-content {
        grid-template-columns: 1fr;
        height: auto;
        gap: 2rem;
      }
      
      .animation-container {
        display: none;
      }
    }
    
    @media (max-width: 768px) {
      .slide-content {
        padding: 1.5rem;
      }
      
      .slide-title {
        font-size: 1.5rem;
      }
      
      .slide-description {
        font-size: 1rem;
      }
    }
  </style>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Animación de líneas de código adicionales
      const hiddenLines = document.querySelectorAll('.code-line.hidden');
      let delay = 3500; // después de que termine la animación de typing
      
      hiddenLines.forEach((line, index) => {
        setTimeout(() => {
          line.classList.remove('hidden');
          line.classList.add('typing');
          
          // Mover el cursor a la línea actual
          const cursor = document.querySelector('.cursor');
          if (cursor) {
            const cursorElement = cursor as HTMLElement;
            cursorElement.style.top = `${94 + (index+1) * 21}px`;
            cursorElement.style.opacity = '1';
            
            if (index === hiddenLines.length - 1) {
              // Ocultar el cursor después de la última línea
              setTimeout(() => {
                cursorElement.style.opacity = '0';
              }, 1500);
            }
          }
        }, delay + index * 1500);
      });
    });
  </script>