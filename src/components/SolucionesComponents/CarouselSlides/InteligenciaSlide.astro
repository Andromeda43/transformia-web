---
// InteligenciaSlide.astro - Slide de Inteligencia Artificial
---

<div class="inteligencia-slide">
    <div class="slide-content">
      <div class="slide-info">
        <div class="slide-header">
          <div class="service-icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
              <line x1="8" y1="21" x2="16" y2="21"></line>
              <line x1="12" y1="17" x2="12" y2="21"></line>
            </svg>
            <div class="icon-pulse"></div>
          </div>
          
          <h3 class="slide-title">INTELIGENCIA ARTIFICIAL Y DATA ANALYTICS</h3>
        </div>
        
        <p class="slide-description">
          Implementamos soluciones de IA y análisis de datos para ayudarte a tomar mejores decisiones basadas en información real y predicciones precisas.
        </p>
        
        <div class="service-tags">
          <span class="tag">Machine Learning</span>
          <span class="tag">Big Data</span>
          <span class="tag">Visualización</span>
        </div>
        
        <a href="/servicios/ia" class="service-link">
          <span class="link-text">Conocer más</span>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="5" y1="12" x2="19" y2="12"></line>
            <polyline points="12 5 19 12 12 19"></polyline>
          </svg>
        </a>
      </div>
      
      <!-- Animación interactiva: Red neuronal -->
      <div class="animation-container">
        <div class="neural-network">
          <div class="network-container">
            <!-- Capa de entrada -->
            <div class="layer input-layer">
              <div class="neuron" data-index="0">
                <div class="neuron-body"></div>
                <div class="neuron-label">Datos</div>
              </div>
              <div class="neuron" data-index="1">
                <div class="neuron-body"></div>
                <div class="neuron-label">Métricas</div>
              </div>
              <div class="neuron" data-index="2">
                <div class="neuron-body"></div>
                <div class="neuron-label">Variables</div>
              </div>
            </div>
            
            <!-- Capa oculta 1 -->
            <div class="layer hidden-layer">
              <div class="neuron" data-index="3">
                <div class="neuron-body"></div>
              </div>
              <div class="neuron" data-index="4">
                <div class="neuron-body"></div>
              </div>
              <div class="neuron" data-index="5">
                <div class="neuron-body"></div>
              </div>
              <div class="neuron" data-index="6">
                <div class="neuron-body"></div>
              </div>
            </div>
            
            <!-- Capa oculta 2 -->
            <div class="layer hidden-layer">
              <div class="neuron" data-index="7">
                <div class="neuron-body"></div>
              </div>
              <div class="neuron" data-index="8">
                <div class="neuron-body"></div>
              </div>
              <div class="neuron" data-index="9">
                <div class="neuron-body"></div>
              </div>
            </div>
            
            <!-- Capa de salida -->
            <div class="layer output-layer">
              <div class="neuron" data-index="10">
                <div class="neuron-body"></div>
                <div class="neuron-label">Predicción</div>
              </div>
              <div class="neuron" data-index="11">
                <div class="neuron-body"></div>
                <div class="neuron-label">Insights</div>
              </div>
            </div>
          </div>
          
          <!-- Conexiones entre neuronas -->
          <svg class="connections-svg" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
            <!-- Las conexiones se generan vía JavaScript -->
          </svg>
          
          <!-- Pulsos de activación -->
          <div class="activation-pulses">
            <div class="pulse"></div>
            <div class="pulse"></div>
            <div class="pulse"></div>
          </div>
        </div>
        
        <!-- Panel de datos -->
        <div class="data-panel">
          <div class="panel-header">
            <div class="panel-title">AI SYSTEM</div>
            <div class="system-status">En proceso</div>
          </div>
          
          <div class="data-visualization">
            <div class="data-chart">
              <div class="chart-bar" style="--height: 30%"></div>
              <div class="chart-bar" style="--height: 65%"></div>
              <div class="chart-bar" style="--height: 45%"></div>
              <div class="chart-bar" style="--height: 80%"></div>
              <div class="chart-bar" style="--height: 50%"></div>
            </div>
            
            <div class="prediction-accuracy">
              <div class="accuracy-label">Precisión del modelo</div>
              <div class="accuracy-value">94.8%</div>
              <div class="accuracy-meter">
                <div class="meter-fill"></div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="floating-elements">
          <div class="element ai-brain">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="10"></circle>
              <path d="M8 12h4"></path>
              <path d="M12 16v-8"></path>
              <path d="M16 12h-4"></path>
            </svg>
          </div>
          <div class="element data-icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M22 12h-4l-3 9L9 3l-3 9H2"></path>
            </svg>
          </div>
          <div class="element graph-icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="2" y="2" width="20" height="20" rx="2" ry="2"></rect>
              <line x1="2" y1="12" x2="22" y2="12"></line>
              <line x1="12" y1="2" x2="12" y2="22"></line>
            </svg>
          </div>
          <div class="element prediction-icon">ML</div>
        </div>
      </div>
    </div>
  </div>
  
  <style>
    /* Estilos para el slide de Inteligencia Artificial */
    .inteligencia-slide {
      --slide-color: var(--pink);
      --highlight-color: #ff42b0;
      --lowlight-color: rgba(255, 66, 176, 0.5);
      --bg-glow: rgba(255, 66, 176, 0.2);
    }
    
    .slide-content {
      background: rgba(26, 20, 45, 0.8);
      backdrop-filter: blur(15px);
      border-radius: 16px;
      border: 1px solid rgba(255, 66, 176, 0.3);
      padding: 2.5rem;
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 3rem;
      position: relative;
      overflow: hidden;
      height: 500px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2), 0 0 30px rgba(255, 66, 176, 0.1);
    }
    
    .slide-content::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle at 30% 30%, var(--bg-glow) 0%, transparent 70%);
      z-index: 0;
    }
    
    /* Información del servicio */
    .slide-info {
      display: flex;
      flex-direction: column;
      position: relative;
      z-index: 2;
    }
    
    .slide-header {
      margin-bottom: 1.5rem;
    }
    
    .service-icon {
      width: 70px;
      height: 70px;
      border-radius: 12px;
      background: rgba(255, 66, 176, 0.1);
      border: 2px solid rgba(255, 66, 176, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 1.5rem;
      color: var(--highlight-color);
      position: relative;
      transition: all 0.3s ease;
    }
    
    .service-icon svg {
      width: 35px;
      height: 35px;
    }
    
    .icon-pulse {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 100%;
      height: 100%;
      border-radius: 12px;
      border: 2px solid var(--highlight-color);
      opacity: 0;
      z-index: -1;
      animation: icon-pulse 2s infinite;
    }
    
    @keyframes icon-pulse {
      0% {
        transform: translate(-50%, -50%) scale(1);
        opacity: 0.7;
      }
      100% {
        transform: translate(-50%, -50%) scale(1.5);
        opacity: 0;
      }
    }
    
    .slide-title {
      font-family: var(--font-mono);
      font-size: 1.8rem;
      font-weight: 800;
      color: var(--highlight-color);
      line-height: 1.3;
      margin-bottom: 1.5rem;
      text-shadow: 0 0 10px rgba(255, 66, 176, 0.5);
      animation: title-glow 2s infinite alternate;
    }
    
    @keyframes title-glow {
      from {
        text-shadow: 0 0 10px rgba(255, 66, 176, 0.5);
      }
      to {
        text-shadow: 0 0 15px rgba(255, 66, 176, 0.8), 0 0 25px rgba(255, 66, 176, 0.5);
      }
    }
    
    .slide-description {
      font-family: var(--font-sans);
      font-size: 1.1rem;
      line-height: 1.7;
      color: rgba(255, 255, 255, 0.9);
      margin-bottom: 2rem;
      flex-grow: 1;
    }
    
    /* Tags */
    .service-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.8rem;
      margin-bottom: 2rem;
    }
    
    .tag {
      background: rgba(255, 66, 176, 0.1);
      border: 1px solid rgba(255, 66, 176, 0.3);
      border-radius: 20px;
      padding: 0.5rem 1rem;
      font-size: 0.9rem;
      color: rgba(255, 255, 255, 0.9);
      font-family: var(--font-mono);
      transition: all 0.3s ease;
    }
    
    .tag:hover {
      background: rgba(255, 66, 176, 0.2);
      transform: translateY(-3px);
      box-shadow: 0 3px 10px rgba(255, 66, 176, 0.3);
    }
    
    /* Enlace de servicio */
    .service-link {
      display: flex;
      align-items: center;
      justify-content: space-between;
      background: rgba(255, 66, 176, 0.1);
      border: 1px solid rgba(255, 66, 176, 0.3);
      border-radius: 8px;
      padding: 1rem 1.5rem;
      color: var(--highlight-color);
      font-family: var(--font-mono);
      font-weight: bold;
      font-size: 1rem;
      text-decoration: none;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
      margin-top: auto;
    }
    
    .service-link::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s ease;
    }
    
    .service-link:hover {
      background: var(--highlight-color);
      color: white;
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2), 0 0 10px rgba(255, 66, 176, 0.5);
    }
    
    .service-link:hover::before {
      left: 100%;
    }
    
    .service-link svg {
      width: 20px;
      height: 20px;
      margin-left: 0.5rem;
      transition: transform 0.3s ease;
    }
    
    .service-link:hover svg {
      transform: translateX(5px);
    }
    
    /* Animación de red neuronal */
    .animation-container {
      position: relative;
      z-index: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100%;
    }
    
    .neural-network {
      width: 100%;
      height: 65%;
      position: relative;
      background: rgba(26, 15, 35, 0.5);
      border-radius: 12px;
      border: 1px solid rgba(255, 66, 176, 0.3);
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
      overflow: hidden;
    }
    
    .network-container {
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: space-around;
      align-items: center;
      padding: 1rem;
      position: relative;
      z-index: 2;
    }
    
    .layer {
      display: flex;
      flex-direction: column;
      justify-content: space-around;
      height: 100%;
      position: relative;
    }
    
    .neuron {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 0.5rem 0;
      position: relative;
    }
    
    .neuron-body {
      width: 25px;
      height: 25px;
      border-radius: 50%;
      background: var(--highlight-color);
      box-shadow: 0 0 10px var(--highlight-color);
      position: relative;
      z-index: 3;
      animation: neuron-pulse 3s infinite alternate;
    }
    
    @keyframes neuron-pulse {
      0% {
        transform: scale(1);
        box-shadow: 0 0 5px var(--highlight-color);
      }
      100% {
        transform: scale(1.2);
        box-shadow: 0 0 15px var(--highlight-color), 0 0 20px var(--highlight-color);
      }
    }
    
    .neuron-label {
      font-size: 0.7rem;
      color: white;
      margin-top: 0.5rem;
      text-shadow: 0 0 5px var(--highlight-color);
      font-family: var(--font-mono);
    }
    
    /* Conexiones SVG entre neuronas */
    .connections-svg {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;
      pointer-events: none;
    }
    
    /* Pulsos de activación */
    .activation-pulses {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 2;
    }
    
    .pulse {
      position: absolute;
      width: 15px;
      height: 15px;
      border-radius: 50%;
      background-color: white;
      opacity: 0.8;
      box-shadow: 0 0 10px var(--highlight-color), 0 0 20px var(--highlight-color);
      animation: move-pulse 10s infinite;
    }
    
    .pulse:nth-child(1) {
      top: 30%;
      left: 0;
      animation-delay: 0s;
    }
    
    .pulse:nth-child(2) {
      top: 50%;
      left: 0;
      animation-delay: 3s;
    }
    
    .pulse:nth-child(3) {
      top: 70%;
      left: 0;
      animation-delay: 6s;
    }
    
    @keyframes move-pulse {
      0% {
        left: 0;
        opacity: 0;
      }
      5% {
        opacity: 0.8;
      }
      25% {
        left: 25%;
        top: calc(var(--y, 30%) + 10%);
      }
      50% {
        left: 50%;
        top: calc(var(--y, 30%) - 10%);
      }
      75% {
        left: 75%;
        top: calc(var(--y, 30%) + 5%);
      }
      95% {
        opacity: 0.8;
      }
      100% {
        left: 100%;
        opacity: 0;
      }
    }
    
    /* Panel de datos */
    .data-panel {
      width: 100%;
      height: 30%;
      background: rgba(26, 15, 35, 0.7);
      border: 1px solid rgba(255, 66, 176, 0.3);
      border-radius: 12px;
      overflow: hidden;
      margin-top: 1rem;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
    }
    
    .panel-header {
      background: rgba(255, 66, 176, 0.2);
      padding: 0.5rem 1rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid rgba(255, 66, 176, 0.3);
    }
    
    .panel-title {
      font-family: var(--font-mono);
      font-size: 0.8rem;
      font-weight: bold;
      color: var(--highlight-color);
    }
    
    .system-status {
      font-size: 0.7rem;
      color: rgba(255, 255, 255, 0.7);
      background: rgba(255, 66, 176, 0.3);
      padding: 0.2rem 0.6rem;
      border-radius: 10px;
    }
    
    .data-visualization {
      display: flex;
      height: calc(100% - 33px);
      padding: 0.5rem;
    }
    
    .data-chart {
      flex: 1;
      display: flex;
      justify-content: space-around;
      align-items: flex-end;
      height: 100%;
      padding-bottom: 5px;
    }
    
    .chart-bar {
      width: 15%;
      height: var(--height);
      background: linear-gradient(to top, rgba(255, 66, 176, 0.3), rgba(255, 66, 176, 0.7));
      border-radius: 3px 3px 0 0;
      animation: bar-appear 1s ease-out forwards;
      transform-origin: bottom;
      opacity: 0;
    }
    
    .chart-bar:nth-child(1) { animation-delay: 0.1s; }
    .chart-bar:nth-child(2) { animation-delay: 0.2s; }
    .chart-bar:nth-child(3) { animation-delay: 0.3s; }
    .chart-bar:nth-child(4) { animation-delay: 0.4s; }
    .chart-bar:nth-child(5) { animation-delay: 0.5s; }
    
    @keyframes bar-appear {
      0% {
        opacity: 0;
        transform: scaleY(0);
      }
      100% {
        opacity: 1;
        transform: scaleY(1);
      }
    }
    
    .prediction-accuracy {
      width: 40%;
      padding: 0 0.5rem;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }
    
    .accuracy-label {
      font-size: 0.7rem;
      color: rgba(255, 255, 255, 0.8);
      margin-bottom: 0.3rem;
    }
    
    .accuracy-value {
      font-family: var(--font-mono);
      font-size: 1.2rem;
      font-weight: bold;
      color: var(--highlight-color);
      margin-bottom: 0.5rem;
    }
    
    .accuracy-meter {
      width: 100%;
      height: 6px;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 3px;
      overflow: hidden;
    }
    
    .meter-fill {
      width: 94.8%;
      height: 100%;
      background: var(--highlight-color);
      border-radius: 3px;
      animation: fill-meter 2s ease-out forwards;
      transform-origin: left;
      transform: scaleX(0);
    }
    
    @keyframes fill-meter {
      0% {
        transform: scaleX(0);
      }
      100% {
        transform: scaleX(1);
      }
    }
    
    /* Elementos flotantes */
    .floating-elements {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
      pointer-events: none;
    }
    
    .element {
      position: absolute;
      color: var(--lowlight-color);
      font-family: var(--font-mono);
      font-weight: bold;
      animation: float-element 10s infinite ease-in-out;
    }
    
    .ai-brain {
      top: 15%;
      left: 20%;
      width: 28px;
      height: 28px;
      animation-delay: 0s;
    }
    
    .data-icon {
      bottom: 25%;
      right: 15%;
      width: 25px;
      height: 25px;
      animation-delay: 2s;
    }
    
    .graph-icon {
      top: 20%;
      right: 25%;
      width: 24px;
      height: 24px;
      animation-delay: 4s;
    }
    
    .prediction-icon {
      bottom: 15%;
      left: 25%;
      font-size: 16px;
      animation-delay: 1s;
    }
    
    @keyframes float-element {
      0%, 100% {
        transform: translate(0, 0);
      }
      25% {
        transform: translate(10px, -15px) rotate(5deg);
      }
      50% {
        transform: translate(0, 0) rotate(0deg);
      }
      75% {
        transform: translate(-10px, 15px) rotate(-5deg);
      }
    }
    
    /* Media queries */
    @media (max-width: 1200px) {
      .slide-content {
        grid-template-columns: 1fr;
        height: auto;
        gap: 2rem;
      }
      
      .animation-container {
        display: none;
      }
    }
    
    @media (max-width: 768px) {
      .slide-content {
        padding: 1.5rem;
      }
      
      .slide-title {
        font-size: 1.5rem;
      }
      
      .slide-description {
        font-size: 1rem;
      }
    }
  </style>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Generar conexiones entre neuronas
      createNeuronConnections();
      
      // Configurar los pulsos de activación
      const pulses = document.querySelectorAll('.pulse');
      pulses.forEach((pulse, index) => {
        const pulseElement = pulse as HTMLElement;
        pulseElement.style.setProperty('--y', `${30 + index * 20}%`);
      });
    });
    
    // Función para crear conexiones entre neuronas
    function createNeuronConnections() {
      const neurons = document.querySelectorAll('.neuron');
      const svg = document.querySelector('.connections-svg');
      
      if (!svg) return;
      
      // Estructura de capas para mapeo de conexiones
      const layerStructure = [
        {start: 0, end: 2},    // Input layer (0-2)
        {start: 3, end: 6},    // Hidden layer 1 (3-6)
        {start: 7, end: 9},    // Hidden layer 2 (7-9)
        {start: 10, end: 11}   // Output layer (10-11)
      ];
      
      // Crear conexiones entre capas
      for (let l = 0; l < layerStructure.length - 1; l++) {
        // Capa actual
        const currentLayer = layerStructure[l];
        // Próxima capa
        const nextLayer = layerStructure[l + 1];
        
        // Conectar cada neurona de la capa actual con todas las de la siguiente capa
        for (let i = currentLayer.start; i <= currentLayer.end; i++) {
          const neuronFrom = neurons[i];
          if (!neuronFrom) continue;
          
          const fromRect = neuronFrom.getBoundingClientRect();
          const svgRect = svg.getBoundingClientRect();
          
          const fromX = fromRect.left + fromRect.width / 2 - svgRect.left;
          const fromY = fromRect.top + fromRect.height / 2 - svgRect.top;
          
          for (let j = nextLayer.start; j <= nextLayer.end; j++) {
            const neuronTo = neurons[j];
            if (!neuronTo) continue;
            
            const toRect = neuronTo.getBoundingClientRect();
            const toX = toRect.left + toRect.width / 2 - svgRect.left;
            const toY = toRect.top + toRect.height / 2 - svgRect.top;
            
            // Crear línea SVG
            const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            line.setAttribute('x1', fromX.toString());
            line.setAttribute('y1', fromY.toString());
            line.setAttribute('x2', toX.toString());
            line.setAttribute('y2', toY.toString());
            line.setAttribute('stroke', 'rgba(255, 66, 176, 0.3)');
            line.setAttribute('stroke-width', '1');
            
            // Añadir animación
            const animate = document.createElementNS('http://www.w3.org/2000/svg', 'animate');
            animate.setAttribute('attributeName', 'stroke-opacity');
            animate.setAttribute('values', '0.3;0.8;0.3');
            animate.setAttribute('dur', '3s');
            animate.setAttribute('repeatCount', 'indefinite');
            
            line.appendChild(animate);
            svg.appendChild(line);
          }
        }
      }
    }
  </script>