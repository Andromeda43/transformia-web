---
// SolucionesTabCards.astro - Sistema de tabs y cards que reemplaza al carrusel
import DesarrolloSlide from './CarouselSlides/DesarrolloSlide.astro';
import TransformacionSlide from './CarouselSlides/TransformacionSlide.astro';
import InteligenciaSlide from './CarouselSlides/InteligenciaSlide.astro';
import AsesoriaSlide from './CarouselSlides/AsesoriaSlide.astro';
import IoTSlide from './CarouselSlides/IoTSlide.astro';
import ArquitecturaSlide from './CarouselSlides/ArquitecturaSlide.astro';
import DatabaseSlide from './CarouselSlides/DatabaseSlide.astro';
---

<div class="tab-cards-container">
  <!-- Panel de navegación con tabs -->
  <div class="tabs-container">
    <div class="tabs-nav">
      <button class="tab-button active" data-index="0">
        <div class="tab-glow"></div>
        <div class="tab-icon">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="16 18 22 12 16 6"></polyline>
            <polyline points="8 6 2 12 8 18"></polyline>
          </svg>
        </div>
        <span class="tab-label">Desarrollo</span>
      </button>
      
      <button class="tab-button" data-index="1">
        <div class="tab-glow"></div>
        <div class="tab-icon">
          <!-- Icono actualizado para coincidir con el slide principal -->
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path>
            <path d="M3.29 7L12 12l8.71-5"></path>
            <line x1="12" y1="22" x2="12" y2="12"></line>
            <path d="M7 3.5v5" stroke-dasharray="1 1"></path>
            <path d="M17 3.5v5" stroke-dasharray="1 1"></path>
            <path d="M7 14v4" stroke-dasharray="1 1"></path>
            <path d="M17 14v4" stroke-dasharray="1 1"></path>
          </svg>
        </div>
        <span class="tab-label">Transformación</span>
      </button>
      
      <button class="tab-button" data-index="2">
        <div class="tab-glow"></div>
        <div class="tab-icon">
          <!-- Icono simplificado para Inteligencia Artificial -->
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <path d="M12 16v-4"></path>
            <path d="M8 12l4-4 4 4"></path>
          </svg>
        </div>
        <span class="tab-label">Inteligencia</span>
      </button>
      
      <button class="tab-button" data-index="3">
        <div class="tab-glow"></div>
        <div class="tab-icon">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
            <polyline points="14 2 14 8 20 8"></polyline>
            <line x1="16" y1="13" x2="8" y2="13"></line>
            <line x1="16" y1="17" x2="8" y2="17"></line>
            <polyline points="10 9 9 9 8 9"></polyline>
          </svg>
        </div>
        <span class="tab-label">Asesoría</span>
      </button>
      
      <button class="tab-button" data-index="4">
        <div class="tab-glow"></div>
        <div class="tab-icon">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M6.5 6.5h11v11h-11z"></path>
            <path d="M5 5L2 2"></path>
            <path d="M19 5l3-3"></path>
            <path d="M5 19l-3 3"></path>
            <path d="M19 19l3 3"></path>
          </svg>
        </div>
        <span class="tab-label">IoT</span>
      </button>
      
      <button class="tab-button" data-index="5">
        <div class="tab-glow"></div>
        <div class="tab-icon">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"></polygon>
            <line x1="12" y1="22" x2="12" y2="15.5"></line>
            <polyline points="22 8.5 12 15.5 2 8.5"></polyline>
          </svg>
        </div>
        <span class="tab-label">Arquitectura</span>
      </button>
      
      <button class="tab-button" data-index="6">
        <div class="tab-glow"></div>
        <div class="tab-icon">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <ellipse cx="12" cy="5" rx="9" ry="3"></ellipse>
            <path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"></path>
            <path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"></path>
          </svg>
        </div>
        <span class="tab-label">Bases de Datos</span>
      </button>
      
      <!-- Movido el indicador dentro del tabs-nav para asegurar que esté por encima -->
      <div class="tab-indicator"></div>
    </div>
  </div>
  
  <!-- Contenedor de las cards -->
  <div class="cards-container">
    <div class="cards-wrapper">
      <div class="card active" data-index="0">
        <DesarrolloSlide />
      </div>
      
      <div class="card" data-index="1">
        <TransformacionSlide />
      </div>
      
      <div class="card" data-index="2">
        <InteligenciaSlide />
      </div>
      
      <div class="card" data-index="3">
        <AsesoriaSlide />
      </div>
      
      <div class="card" data-index="4">
        <IoTSlide />
      </div>
      
      <div class="card" data-index="5">
        <ArquitecturaSlide />
      </div>
      
      <div class="card" data-index="6">
        <DatabaseSlide />
      </div>
    </div>
  </div>
  
  <!-- Indicador móvil de páginas -->
  <div class="mobile-indicators">
    <span class="indicator active" data-index="0"></span>
    <span class="indicator" data-index="1"></span>
    <span class="indicator" data-index="2"></span>
    <span class="indicator" data-index="3"></span>
    <span class="indicator" data-index="4"></span>
    <span class="indicator" data-index="5"></span>
    <span class="indicator" data-index="6"></span>
  </div>
</div>

<style>
  /* Variables y estilos base */
  :root {
    --purple: #b042ff;
    --blue: #4287ff;
    --pink: #ff42b0;
    --yellow: #e8ff42;
    --orange: #ff7842;
    --green: #42ff9d;
    --aqua: #42e8ff;
    --dark-bg: #0a0a14;
    --dark-purple: #1a142d;
  }
  
  .tab-cards-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 2rem;
    max-width: 1280px;
    margin: 0 auto;
  }
  
  /* Panel de navegación con tabs */
  .tabs-container {
    width: 100%;
    max-width: 900px; /* Aumentado de 800px a 900px para dar más espacio */
    margin: 0 auto;
    position: relative;
    padding-bottom: 5px; /* Reducido de 10px a 5px */
    display: flex;
    justify-content: center; /* Centrar horizontalmente */
  }
  
  .tabs-nav {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    background: rgba(20, 20, 40, 0.6);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(176, 66, 255, 0.3);
    border-radius: 12px;
    padding: 0.75rem 1.25rem; /* Aumentado el padding horizontal de 0.75rem a 1.25rem */
    position: relative;
    z-index: 2;
    column-gap: 0.75rem; /* Añadido gap entre columnas */
    min-width: max-content; /* Evita que los elementos se compriman demasiado */
    width: 100%; /* Asegura que ocupe todo el ancho disponible */
    box-sizing: border-box; /* Incluye padding y border en el ancho total */
  }
  
  .tab-button {
    background: none;
    border: none;
    color: rgba(255, 255, 255, 0.7);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    font-weight: 600;
    padding: 1rem 0.25rem; /* Ajustado padding horizontal para balance */
    margin: 0 0.15rem; /* Añadido margen horizontal para separación adicional */
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    z-index: 1;
    border-radius: 8px;
  }
  
  .tab-button.active, .tab-button:hover {
    color: white;
  }
  
  .tab-glow {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(176, 66, 255, 0.1);
    border-radius: 8px;
    opacity: 0;
    transition: all 0.3s ease;
    z-index: -1;
  }
  
  .tab-button.active .tab-glow {
    opacity: 1;
    box-shadow: 0 0 15px rgba(176, 66, 255, 0.3);
  }
  
  .tab-label {
    font-size: 0.8rem;
    font-weight: 700; /* Más legible */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100%;
    line-height: 1.2;
    letter-spacing: 0.5px; /* Mejor legibilidad */
  }
  
  .tab-icon {
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: inherit;
    filter: drop-shadow(0 0 3px rgba(255, 255, 255, 0.3)); /* Sombra sutil */
  }
  
  .tab-button:nth-child(1) .tab-glow,
  .tab-button:nth-child(1).active .tab-icon {
    color: var(--purple);
  }
  
  .tab-button:nth-child(2) .tab-glow,
  .tab-button:nth-child(2).active .tab-icon {
    color: var(--blue);
  }
  
  .tab-button:nth-child(3) .tab-glow,
  .tab-button:nth-child(3).active .tab-icon {
    color: var(--pink);
  }
  
  .tab-button:nth-child(4) .tab-glow,
  .tab-button:nth-child(4).active .tab-icon {
    color: var(--yellow);
  }
  
  .tab-button:nth-child(5) .tab-glow,
  .tab-button:nth-child(5).active .tab-icon {
    color: var(--orange);
  }
  
  .tab-button:nth-child(6) .tab-glow,
  .tab-button:nth-child(6).active .tab-icon {
    color: var(--green);
  }
  
  .tab-button:nth-child(7) .tab-glow,
  .tab-button:nth-child(7).active .tab-icon {
    color: var(--aqua);
  }
  
  /* Indicador de tabs */  
  .tab-indicator {
    position: absolute;
    bottom: 0;
    left: 0; /* Se ajustará con JavaScript */
    height: 4px;
    width: calc(100% / 7); /* Ancho inicial */
    background-color: var(--purple); /* Color inicial */
    border-radius: 4px;
    transition: all 0.4s ease;
    box-shadow: 0 0 15px rgba(176, 66, 255, 0.7);
    z-index: 10; /* Aseguramos que esté por encima */
  }
  
  /* Contenedor de las cards */
  .cards-container {
    width: 100%;
    position: relative;
    overflow: hidden;
  }
  
  .cards-wrapper {
    position: relative;
    width: 100%;
    min-height: 500px;
  }
  
  .card {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.5s ease, transform 0.5s ease;
    visibility: hidden;
  }
  
  .card.active {
    opacity: 1;
    transform: translateY(0);
    position: relative;
    visibility: visible;
  }
  
  /* Indicador móvil */
  .mobile-indicators {
    display: none;
    justify-content: center;
    gap: 0.8rem;
    margin-top: 1.5rem;
  }
  
  .indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .indicator.active:nth-child(1) {
    background: var(--purple);
    box-shadow: 0 0 8px var(--purple);
  }
  
  .indicator.active:nth-child(2) {
    background: var(--blue);
    box-shadow: 0 0 8px var(--blue);
  }
  
  .indicator.active:nth-child(3) {
    background: var(--pink);
    box-shadow: 0 0 8px var(--pink);
  }
  
  .indicator.active:nth-child(4) {
    background: var(--yellow);
    box-shadow: 0 0 8px var(--yellow);
  }
  
  .indicator.active:nth-child(5) {
    background: var(--orange);
    box-shadow: 0 0 8px var(--orange);
  }
  
  .indicator.active:nth-child(6) {
    background: var(--green);
    box-shadow: 0 0 8px var(--green);
  }
  
  .indicator.active:nth-child(7) {
    background: var(--aqua);
    box-shadow: 0 0 8px var(--aqua);
  }
  
  /* Responsive */
  @media (max-width: 992px) {
    .tabs-container {
      max-width: 100%;
    }
    
    .tabs-nav {
      grid-template-columns: repeat(7, auto); /* Cambiado de 4fr a auto para mejor adaptación */
      gap: 0.5rem; /* Ajustado de 1rem a 0.5rem */
      padding: 0.75rem; /* Ajustado de 1rem a 0.75rem */
    }
    
    .tab-button {
      min-width: 80px; /* Asegura un ancho mínimo para cada botón */
    }
    
    .tab-indicator {
      display: none;
    }
    
    .card.active {
      min-height: auto;
    }
  }
  
  @media (max-width: 768px) {
    .tab-cards-container {
      gap: 1.5rem;
    }
    
    .tabs-container {
      max-width: 100%;
      /* Habilitamos scroll horizontal solo en pantallas medianas y pequeñas */
      overflow-x: auto;
      scrollbar-width: thin; /* Para Firefox */
      scrollbar-color: rgba(176, 66, 255, 0.5) rgba(20, 20, 40, 0.3); /* Para Firefox */
      padding-bottom: 10px; /* Espacio para el scrollbar */
      -webkit-overflow-scrolling: touch; /* Desplazamiento suave en iOS */
      justify-content: flex-start; /* Cambiado para el comportamiento correcto con scroll */
    }
    
    .tabs-container::-webkit-scrollbar {
      height: 6px; /* Altura del scrollbar */
    }
    
    .tabs-container::-webkit-scrollbar-track {
      background: rgba(20, 20, 40, 0.3);
      border-radius: 10px;
    }
    
    .tabs-container::-webkit-scrollbar-thumb {
      background-color: rgba(176, 66, 255, 0.5);
      border-radius: 10px;
    }
    
    .tabs-nav {
      padding: 0.6rem; /* Ajustado de 0.8rem a 0.6rem */
      column-gap: 0.4rem; /* Reducido de 0.5rem a 0.4rem */
      min-width: max-content; /* Asegura que todos los elementos estén visibles */
    }
    
    .tab-button {
      padding: 0.75rem 0.2rem; /* Reducido padding horizontal */
      margin: 0;
      font-size: 0.75rem; /* Reducido de 0.8rem a 0.75rem */
      min-width: 70px; /* Menor ancho mínimo para pantallas más pequeñas */
    }
    
    .tab-icon {
      width: 20px;
      height: 20px;
    }
    
    .tab-label {
      font-size: 0.7rem; /* Reducido tamaño de fuente */
    }
    
    .mobile-indicators {
      display: flex;
    }
    
    .cards-wrapper {
      min-height: auto;
    }
  }
  
  @media (max-width: 576px) {
    .tab-button {
      font-size: 0.7rem;
      padding: 0.6rem 0.15rem;
      min-width: 65px;
    }
    
    .tab-icon {
      width: 18px;
      height: 18px;
    }
    
    .tab-label {
      font-size: 0.65rem;
      margin-top: 0.3rem;
    }
    
    .tabs-nav {
      padding: 0.5rem 0.4rem;
      column-gap: 0.3rem;
    }
  }
  
  @media (max-width: 480px) {
    .tabs-container {
      padding-bottom: 10px;
    }
    
    .tabs-nav {
      min-width: 700px; /* Ancho mínimo para asegurar que todos los elementos sean visibles */
      grid-template-columns: repeat(7, 1fr);
      gap: 0.25rem;
      padding: 0.5rem 0.3rem;
    }
    
    .tab-button {
      min-width: 60px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const cards = document.querySelectorAll('.card');
    const indicators = document.querySelectorAll('.indicator');
    const tabIndicator = document.querySelector('.tab-indicator');
    
    // Colores para todos los tabs (uno por tab)
    const colors = [
      '#b042ff', // purple - Desarrollo
      '#4287ff', // blue - Transformación
      '#ff42b0', // pink - Inteligencia
      '#e8ff42', // yellow - Asesoría
      '#ff7842', // orange - IoT
      '#42ff9d', // green - Arquitectura
      '#42e8ff'  // aqua - Bases de Datos
    ];
    
    // Función para actualizar el tab y card activos
    function updateActiveTab(index: number) {
      // Actualizar botones tab
      tabButtons.forEach((btn, idx) => {
        if (idx === index) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
      
      // Actualizar cards
      cards.forEach((card, idx) => {
        if (idx === index) {
          card.classList.add('active');
        } else {
          card.classList.remove('active');
        }
      });
      
      // Actualizar indicadores móviles
      indicators.forEach((ind, idx) => {
        if (idx === index) {
          ind.classList.add('active');
        } else {
          ind.classList.remove('active');
        }
      });
      
      // Actualizar posición y color del indicador de tabs
      if (tabIndicator) {
        const activeTab = tabButtons[index];
        
        // Si estamos en modo escritorio (no grid de 4 columnas)
        if (window.innerWidth > 992) {
          // Obtener la posición y dimensiones del botón activo
          const tabRect = activeTab.getBoundingClientRect();
          const tabsNav = document.querySelector('.tabs-nav');
          
          if (tabsNav) {
            const navRect = tabsNav.getBoundingClientRect();
            
            // Calcular la posición relativa y el ancho
            const leftPosition = tabRect.left - navRect.left;
            
            // Aplicar posición y ancho
            (tabIndicator as HTMLElement).style.left = `${leftPosition}px`;
            (tabIndicator as HTMLElement).style.width = `${tabRect.width}px`;
          }
        }
        
        // Establecer color según el tab seleccionado
        (tabIndicator as HTMLElement).style.backgroundColor = colors[index];
        (tabIndicator as HTMLElement).style.boxShadow = `0 0 15px ${colors[index]}`;
      }
    }
    
    // Inicializar posición del indicador al cargar la página
    if (tabIndicator) {
      window.addEventListener('load', () => {
        // El tab inicial activo es el primero (índice 0)
        const activeTab = tabButtons[0];
        const tabsNav = document.querySelector('.tabs-nav');
        
        if (window.innerWidth > 992 && tabsNav) {
          const tabRect = activeTab.getBoundingClientRect();
          const navRect = tabsNav.getBoundingClientRect();
          const leftPosition = tabRect.left - navRect.left;
          
          (tabIndicator as HTMLElement).style.left = `${leftPosition}px`;
          (tabIndicator as HTMLElement).style.width = `${tabRect.width}px`;
        }
      });
      
      // Actualizar posición al cambiar el tamaño de la ventana
      window.addEventListener('resize', () => {
        // Encontrar el índice del tab activo actual
        const activeIndex = Array.from(tabButtons).findIndex(tab => tab.classList.contains('active'));
        
        if (activeIndex >= 0 && window.innerWidth > 992) {
          const activeTab = tabButtons[activeIndex];
          const tabsNav = document.querySelector('.tabs-nav');
          
          if (tabsNav) {
            const tabRect = activeTab.getBoundingClientRect();
            const navRect = tabsNav.getBoundingClientRect();
            const leftPosition = tabRect.left - navRect.left;
            
            (tabIndicator as HTMLElement).style.left = `${leftPosition}px`;
            (tabIndicator as HTMLElement).style.width = `${tabRect.width}px`;
          }
        }
      });
    }
    
    // Eventos para botones de tab
    tabButtons.forEach((button, index) => {
      button.addEventListener('click', () => {
        updateActiveTab(index);
      });
    });
    
    // Eventos para indicadores móviles
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        updateActiveTab(index);
      });
    });
    
    // Soporte para navegación con swipe
    const cardsContainer = document.querySelector('.cards-container');
    if (cardsContainer) {
      let touchStartX = 0;
      let touchEndX = 0;
      
      cardsContainer.addEventListener('touchstart', (e) => {
        if (e instanceof TouchEvent) {
          touchStartX = e.changedTouches[0].screenX;
        }
      }, { passive: true });
      
      cardsContainer.addEventListener('touchend', (e) => {
        if (e instanceof TouchEvent) {
          touchEndX = e.changedTouches[0].screenX;
          handleSwipe();
        }
      }, { passive: true });
      
      function handleSwipe() {
        const activeIndex = Array.from(cards).findIndex(card => card.classList.contains('active'));
        const swipeThreshold = 50;
        
        if (touchEndX < touchStartX - swipeThreshold && activeIndex < cards.length - 1) {
          // Swipe izquierda - Siguiente card
          updateActiveTab(activeIndex + 1);
        }
        
        if (touchEndX > touchStartX + swipeThreshold && activeIndex > 0) {
          // Swipe derecha - Card anterior
          updateActiveTab(activeIndex - 1);
        }
      }
    }
  });
</script>